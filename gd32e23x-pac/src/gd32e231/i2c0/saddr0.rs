# [ doc = "Reader of register SADDR0" ] pub type R = crate :: R < u32 , super :: SADDR0 > ; # [ doc = "Writer for register SADDR0" ] pub type W = crate :: W < u32 , super :: SADDR0 > ; # [ doc = "Register SADDR0 `reset()`'s with value 0" ] impl crate :: ResetValue for super :: SADDR0 { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `ADDFORMAT`" ] pub type ADDFORMAT_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `ADDFORMAT`" ] pub struct ADDFORMAT_W < 'a > { w : & 'a mut W , } impl < 'a > ADDFORMAT_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 15 ) ) | ( ( ( value as u32 ) & 0x01 ) << 15 ) ; self . w } } # [ doc = "Reader of field `ADDRESS`" ] pub type ADDRESS_R = crate :: R < u16 , u16 > ; # [ doc = "Write proxy for field `ADDRESS`" ] pub struct ADDRESS_W < 'a > { w : & 'a mut W , } impl < 'a > ADDRESS_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u16 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x03ff ) | ( ( value as u32 ) & 0x03ff ) ; self . w } } impl R { # [ doc = "Bit 15 - Addressing mode (slave mode)" ] # [ inline ( always ) ] pub fn addformat ( & self ) -> ADDFORMAT_R { ADDFORMAT_R :: new ( ( ( self . bits >> 15 ) & 0x01 ) != 0 ) } # [ doc = "Bits 0:9 - Interface address" ] # [ inline ( always ) ] pub fn address ( & self ) -> ADDRESS_R { ADDRESS_R :: new ( ( self . bits & 0x03ff ) as u16 ) } } impl W { # [ doc = "Bit 15 - Addressing mode (slave mode)" ] # [ inline ( always ) ] pub fn addformat ( & mut self ) -> ADDFORMAT_W { ADDFORMAT_W { w : self } } # [ doc = "Bits 0:9 - Interface address" ] # [ inline ( always ) ] pub fn address ( & mut self ) -> ADDRESS_W { ADDRESS_W { w : self } } }