# [ doc = "Reader of register CFG2" ] pub type R = crate :: R < u32 , super :: CFG2 > ; # [ doc = "Writer for register CFG2" ] pub type W = crate :: W < u32 , super :: CFG2 > ; # [ doc = "Register CFG2 `reset()`'s with value 0" ] impl crate :: ResetValue for super :: CFG2 { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `ADCPSC`" ] pub type ADCPSC_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `ADCPSC`" ] pub struct ADCPSC_W < 'a > { w : & 'a mut W , } impl < 'a > ADCPSC_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 31 ) ) | ( ( ( value as u32 ) & 0x01 ) << 31 ) ; self . w } } # [ doc = "Reader of field `IRC28MDIV`" ] pub type IRC28MDIV_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `IRC28MDIV`" ] pub struct IRC28MDIV_W < 'a > { w : & 'a mut W , } impl < 'a > IRC28MDIV_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 16 ) ) | ( ( ( value as u32 ) & 0x01 ) << 16 ) ; self . w } } # [ doc = "Reader of field `ADCSEL`" ] pub type ADCSEL_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `ADCSEL`" ] pub struct ADCSEL_W < 'a > { w : & 'a mut W , } impl < 'a > ADCSEL_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 8 ) ) | ( ( ( value as u32 ) & 0x01 ) << 8 ) ; self . w } } # [ doc = "Reader of field `USART0SEL`" ] pub type USART0SEL_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `USART0SEL`" ] pub struct USART0SEL_W < 'a > { w : & 'a mut W , } impl < 'a > USART0SEL_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x03 ) | ( ( value as u32 ) & 0x03 ) ; self . w } } impl R { # [ doc = "Bit 31 - Bit 2 of ADCPSC" ] # [ inline ( always ) ] pub fn adcpsc ( & self ) -> ADCPSC_R { ADCPSC_R :: new ( ( ( self . bits >> 31 ) & 0x01 ) != 0 ) } # [ doc = "Bit 16 - CK_IRC28M divider 2 or not" ] # [ inline ( always ) ] pub fn irc28mdiv ( & self ) -> IRC28MDIV_R { IRC28MDIV_R :: new ( ( ( self . bits >> 16 ) & 0x01 ) != 0 ) } # [ doc = "Bit 8 - CK_ADC clock source selection" ] # [ inline ( always ) ] pub fn adcsel ( & self ) -> ADCSEL_R { ADCSEL_R :: new ( ( ( self . bits >> 8 ) & 0x01 ) != 0 ) } # [ doc = "Bits 0:1 - CK_USART0 clock source selection" ] # [ inline ( always ) ] pub fn usart0sel ( & self ) -> USART0SEL_R { USART0SEL_R :: new ( ( self . bits & 0x03 ) as u8 ) } } impl W { # [ doc = "Bit 31 - Bit 2 of ADCPSC" ] # [ inline ( always ) ] pub fn adcpsc ( & mut self ) -> ADCPSC_W { ADCPSC_W { w : self } } # [ doc = "Bit 16 - CK_IRC28M divider 2 or not" ] # [ inline ( always ) ] pub fn irc28mdiv ( & mut self ) -> IRC28MDIV_W { IRC28MDIV_W { w : self } } # [ doc = "Bit 8 - CK_ADC clock source selection" ] # [ inline ( always ) ] pub fn adcsel ( & mut self ) -> ADCSEL_W { ADCSEL_W { w : self } } # [ doc = "Bits 0:1 - CK_USART0 clock source selection" ] # [ inline ( always ) ] pub fn usart0sel ( & mut self ) -> USART0SEL_W { USART0SEL_W { w : self } } }