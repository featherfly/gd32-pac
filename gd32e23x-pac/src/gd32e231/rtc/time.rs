# [ doc = "Reader of register TIME" ] pub type R = crate :: R < u32 , super :: TIME > ; # [ doc = "Writer for register TIME" ] pub type W = crate :: W < u32 , super :: TIME > ; # [ doc = "Register TIME `reset()`'s with value 0" ] impl crate :: ResetValue for super :: TIME { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `PM`" ] pub type PM_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `PM`" ] pub struct PM_W < 'a > { w : & 'a mut W , } impl < 'a > PM_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 22 ) ) | ( ( ( value as u32 ) & 0x01 ) << 22 ) ; self . w } } # [ doc = "Reader of field `HRT`" ] pub type HRT_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `HRT`" ] pub struct HRT_W < 'a > { w : & 'a mut W , } impl < 'a > HRT_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x03 << 20 ) ) | ( ( ( value as u32 ) & 0x03 ) << 20 ) ; self . w } } # [ doc = "Reader of field `HRU`" ] pub type HRU_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `HRU`" ] pub struct HRU_W < 'a > { w : & 'a mut W , } impl < 'a > HRU_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 16 ) ) | ( ( ( value as u32 ) & 0x0f ) << 16 ) ; self . w } } # [ doc = "Reader of field `MNT`" ] pub type MNT_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `MNT`" ] pub struct MNT_W < 'a > { w : & 'a mut W , } impl < 'a > MNT_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x07 << 12 ) ) | ( ( ( value as u32 ) & 0x07 ) << 12 ) ; self . w } } # [ doc = "Reader of field `MNU`" ] pub type MNU_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `MNU`" ] pub struct MNU_W < 'a > { w : & 'a mut W , } impl < 'a > MNU_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 8 ) ) | ( ( ( value as u32 ) & 0x0f ) << 8 ) ; self . w } } # [ doc = "Reader of field `SCT`" ] pub type SCT_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `SCT`" ] pub struct SCT_W < 'a > { w : & 'a mut W , } impl < 'a > SCT_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x07 << 4 ) ) | ( ( ( value as u32 ) & 0x07 ) << 4 ) ; self . w } } # [ doc = "Reader of field `SCU`" ] pub type SCU_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `SCU`" ] pub struct SCU_W < 'a > { w : & 'a mut W , } impl < 'a > SCU_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x0f ) | ( ( value as u32 ) & 0x0f ) ; self . w } } impl R { # [ doc = "Bit 22 - AM/PM mark" ] # [ inline ( always ) ] pub fn pm ( & self ) -> PM_R { PM_R :: new ( ( ( self . bits >> 22 ) & 0x01 ) != 0 ) } # [ doc = "Bits 20:21 - Hour tens in BCD code" ] # [ inline ( always ) ] pub fn hrt ( & self ) -> HRT_R { HRT_R :: new ( ( ( self . bits >> 20 ) & 0x03 ) as u8 ) } # [ doc = "Bits 16:19 - Hour units in BCD format" ] # [ inline ( always ) ] pub fn hru ( & self ) -> HRU_R { HRU_R :: new ( ( ( self . bits >> 16 ) & 0x0f ) as u8 ) } # [ doc = "Bits 12:14 - Minute tens in BCD code" ] # [ inline ( always ) ] pub fn mnt ( & self ) -> MNT_R { MNT_R :: new ( ( ( self . bits >> 12 ) & 0x07 ) as u8 ) } # [ doc = "Bits 8:11 - Minute units in BCD code" ] # [ inline ( always ) ] pub fn mnu ( & self ) -> MNU_R { MNU_R :: new ( ( ( self . bits >> 8 ) & 0x0f ) as u8 ) } # [ doc = "Bits 4:6 - Second tens in BCD code" ] # [ inline ( always ) ] pub fn sct ( & self ) -> SCT_R { SCT_R :: new ( ( ( self . bits >> 4 ) & 0x07 ) as u8 ) } # [ doc = "Bits 0:3 - Second units in BCD code" ] # [ inline ( always ) ] pub fn scu ( & self ) -> SCU_R { SCU_R :: new ( ( self . bits & 0x0f ) as u8 ) } } impl W { # [ doc = "Bit 22 - AM/PM mark" ] # [ inline ( always ) ] pub fn pm ( & mut self ) -> PM_W { PM_W { w : self } } # [ doc = "Bits 20:21 - Hour tens in BCD code" ] # [ inline ( always ) ] pub fn hrt ( & mut self ) -> HRT_W { HRT_W { w : self } } # [ doc = "Bits 16:19 - Hour units in BCD format" ] # [ inline ( always ) ] pub fn hru ( & mut self ) -> HRU_W { HRU_W { w : self } } # [ doc = "Bits 12:14 - Minute tens in BCD code" ] # [ inline ( always ) ] pub fn mnt ( & mut self ) -> MNT_W { MNT_W { w : self } } # [ doc = "Bits 8:11 - Minute units in BCD code" ] # [ inline ( always ) ] pub fn mnu ( & mut self ) -> MNU_W { MNU_W { w : self } } # [ doc = "Bits 4:6 - Second tens in BCD code" ] # [ inline ( always ) ] pub fn sct ( & mut self ) -> SCT_W { SCT_W { w : self } } # [ doc = "Bits 0:3 - Second units in BCD code" ] # [ inline ( always ) ] pub fn scu ( & mut self ) -> SCU_W { SCU_W { w : self } } }