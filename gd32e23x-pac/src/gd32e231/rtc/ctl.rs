# [ doc = "Reader of register CTL" ] pub type R = crate :: R < u32 , super :: CTL > ; # [ doc = "Writer for register CTL" ] pub type W = crate :: W < u32 , super :: CTL > ; # [ doc = "Register CTL `reset()`'s with value 0" ] impl crate :: ResetValue for super :: CTL { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `DSM`" ] pub type DSM_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `DSM`" ] pub struct DSM_W < 'a > { w : & 'a mut W , } impl < 'a > DSM_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 18 ) ) | ( ( ( value as u32 ) & 0x01 ) << 18 ) ; self . w } } # [ doc = "Write proxy for field `S1H`" ] pub struct S1H_W < 'a > { w : & 'a mut W , } impl < 'a > S1H_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 17 ) ) | ( ( ( value as u32 ) & 0x01 ) << 17 ) ; self . w } } # [ doc = "Write proxy for field `A1H`" ] pub struct A1H_W < 'a > { w : & 'a mut W , } impl < 'a > A1H_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 16 ) ) | ( ( ( value as u32 ) & 0x01 ) << 16 ) ; self . w } } # [ doc = "Reader of field `ALRM0IE`" ] pub type ALRM0IE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `ALRM0IE`" ] pub struct ALRM0IE_W < 'a > { w : & 'a mut W , } impl < 'a > ALRM0IE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 12 ) ) | ( ( ( value as u32 ) & 0x01 ) << 12 ) ; self . w } } # [ doc = "Reader of field `ALRM0EN`" ] pub type ALRM0EN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `ALRM0EN`" ] pub struct ALRM0EN_W < 'a > { w : & 'a mut W , } impl < 'a > ALRM0EN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 8 ) ) | ( ( ( value as u32 ) & 0x01 ) << 8 ) ; self . w } } # [ doc = "Reader of field `CS`" ] pub type CS_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `CS`" ] pub struct CS_W < 'a > { w : & 'a mut W , } impl < 'a > CS_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 6 ) ) | ( ( ( value as u32 ) & 0x01 ) << 6 ) ; self . w } } # [ doc = "Reader of field `BPSHAD`" ] pub type BPSHAD_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `BPSHAD`" ] pub struct BPSHAD_W < 'a > { w : & 'a mut W , } impl < 'a > BPSHAD_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 5 ) ) | ( ( ( value as u32 ) & 0x01 ) << 5 ) ; self . w } } # [ doc = "Reader of field `REFEN`" ] pub type REFEN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `REFEN`" ] pub struct REFEN_W < 'a > { w : & 'a mut W , } impl < 'a > REFEN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 4 ) ) | ( ( ( value as u32 ) & 0x01 ) << 4 ) ; self . w } } impl R { # [ doc = "Bit 18 - Backup" ] # [ inline ( always ) ] pub fn dsm ( & self ) -> DSM_R { DSM_R :: new ( ( ( self . bits >> 18 ) & 0x01 ) != 0 ) } # [ doc = "Bit 12 - Alarm A interrupt enable" ] # [ inline ( always ) ] pub fn alrm0ie ( & self ) -> ALRM0IE_R { ALRM0IE_R :: new ( ( ( self . bits >> 12 ) & 0x01 ) != 0 ) } # [ doc = "Bit 8 - Alarm A enable" ] # [ inline ( always ) ] pub fn alrm0en ( & self ) -> ALRM0EN_R { ALRM0EN_R :: new ( ( ( self . bits >> 8 ) & 0x01 ) != 0 ) } # [ doc = "Bit 6 - Hour format" ] # [ inline ( always ) ] pub fn cs ( & self ) -> CS_R { CS_R :: new ( ( ( self . bits >> 6 ) & 0x01 ) != 0 ) } # [ doc = "Bit 5 - Bypass the shadow registers" ] # [ inline ( always ) ] pub fn bpshad ( & self ) -> BPSHAD_R { BPSHAD_R :: new ( ( ( self . bits >> 5 ) & 0x01 ) != 0 ) } # [ doc = "Bit 4 - RTC_REFIN reference clock detection enable (50 or 60 Hz)" ] # [ inline ( always ) ] pub fn refen ( & self ) -> REFEN_R { REFEN_R :: new ( ( ( self . bits >> 4 ) & 0x01 ) != 0 ) } } impl W { # [ doc = "Bit 18 - Backup" ] # [ inline ( always ) ] pub fn dsm ( & mut self ) -> DSM_W { DSM_W { w : self } } # [ doc = "Bit 17 - Subtract 1 hour (winter time change)" ] # [ inline ( always ) ] pub fn s1h ( & mut self ) -> S1H_W { S1H_W { w : self } } # [ doc = "Bit 16 - Add 1 hour (summer time change)" ] # [ inline ( always ) ] pub fn a1h ( & mut self ) -> A1H_W { A1H_W { w : self } } # [ doc = "Bit 12 - Alarm A interrupt enable" ] # [ inline ( always ) ] pub fn alrm0ie ( & mut self ) -> ALRM0IE_W { ALRM0IE_W { w : self } } # [ doc = "Bit 8 - Alarm A enable" ] # [ inline ( always ) ] pub fn alrm0en ( & mut self ) -> ALRM0EN_W { ALRM0EN_W { w : self } } # [ doc = "Bit 6 - Hour format" ] # [ inline ( always ) ] pub fn cs ( & mut self ) -> CS_W { CS_W { w : self } } # [ doc = "Bit 5 - Bypass the shadow registers" ] # [ inline ( always ) ] pub fn bpshad ( & mut self ) -> BPSHAD_W { BPSHAD_W { w : self } } # [ doc = "Bit 4 - RTC_REFIN reference clock detection enable (50 or 60 Hz)" ] # [ inline ( always ) ] pub fn refen ( & mut self ) -> REFEN_W { REFEN_W { w : self } } }