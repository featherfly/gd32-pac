# [ doc = "Reader of register OPA_CTL" ] pub type R = crate :: R < u32 , super :: OPA_CTL > ; # [ doc = "Writer for register OPA_CTL" ] pub type W = crate :: W < u32 , super :: OPA_CTL > ; # [ doc = "Register OPA_CTL `reset()`'s with value 0x0001_0101" ] impl crate :: ResetValue for super :: OPA_CTL { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0x0001_0101 } } # [ doc = "Reader of field `OPA0PD`" ] pub type OPA0PD_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA0PD`" ] pub struct OPA0PD_W < 'a > { w : & 'a mut W , } impl < 'a > OPA0PD_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x01 ) | ( ( value as u32 ) & 0x01 ) ; self . w } } # [ doc = "Reader of field `T3OPA0`" ] pub type T3OPA0_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `T3OPA0`" ] pub struct T3OPA0_W < 'a > { w : & 'a mut W , } impl < 'a > T3OPA0_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 1 ) ) | ( ( ( value as u32 ) & 0x01 ) << 1 ) ; self . w } } # [ doc = "Reader of field `S1OPA0`" ] pub type S1OPA0_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `S1OPA0`" ] pub struct S1OPA0_W < 'a > { w : & 'a mut W , } impl < 'a > S1OPA0_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 2 ) ) | ( ( ( value as u32 ) & 0x01 ) << 2 ) ; self . w } } # [ doc = "Reader of field `S2OPA0`" ] pub type S2OPA0_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `S2OPA0`" ] pub struct S2OPA0_W < 'a > { w : & 'a mut W , } impl < 'a > S2OPA0_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 3 ) ) | ( ( ( value as u32 ) & 0x01 ) << 3 ) ; self . w } } # [ doc = "Reader of field `S3OPA0`" ] pub type S3OPA0_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `S3OPA0`" ] pub struct S3OPA0_W < 'a > { w : & 'a mut W , } impl < 'a > S3OPA0_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 4 ) ) | ( ( ( value as u32 ) & 0x01 ) << 4 ) ; self . w } } # [ doc = "Reader of field `OPA0CAL_L`" ] pub type OPA0CAL_L_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA0CAL_L`" ] pub struct OPA0CAL_L_W < 'a > { w : & 'a mut W , } impl < 'a > OPA0CAL_L_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 5 ) ) | ( ( ( value as u32 ) & 0x01 ) << 5 ) ; self . w } } # [ doc = "Reader of field `OPA0CAL_H`" ] pub type OPA0CAL_H_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA0CAL_H`" ] pub struct OPA0CAL_H_W < 'a > { w : & 'a mut W , } impl < 'a > OPA0CAL_H_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 6 ) ) | ( ( ( value as u32 ) & 0x01 ) << 6 ) ; self . w } } # [ doc = "Reader of field `OPA0LPM`" ] pub type OPA0LPM_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA0LPM`" ] pub struct OPA0LPM_W < 'a > { w : & 'a mut W , } impl < 'a > OPA0LPM_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 7 ) ) | ( ( ( value as u32 ) & 0x01 ) << 7 ) ; self . w } } # [ doc = "Reader of field `OPA1PD`" ] pub type OPA1PD_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA1PD`" ] pub struct OPA1PD_W < 'a > { w : & 'a mut W , } impl < 'a > OPA1PD_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 8 ) ) | ( ( ( value as u32 ) & 0x01 ) << 8 ) ; self . w } } # [ doc = "Reader of field `T3OPA1`" ] pub type T3OPA1_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `T3OPA1`" ] pub struct T3OPA1_W < 'a > { w : & 'a mut W , } impl < 'a > T3OPA1_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 9 ) ) | ( ( ( value as u32 ) & 0x01 ) << 9 ) ; self . w } } # [ doc = "Reader of field `S1OPA1`" ] pub type S1OPA1_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `S1OPA1`" ] pub struct S1OPA1_W < 'a > { w : & 'a mut W , } impl < 'a > S1OPA1_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 10 ) ) | ( ( ( value as u32 ) & 0x01 ) << 10 ) ; self . w } } # [ doc = "Reader of field `S2OPA1`" ] pub type S2OPA1_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `S2OPA1`" ] pub struct S2OPA1_W < 'a > { w : & 'a mut W , } impl < 'a > S2OPA1_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 11 ) ) | ( ( ( value as u32 ) & 0x01 ) << 11 ) ; self . w } } # [ doc = "Reader of field `S3OPA1`" ] pub type S3OPA1_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `S3OPA1`" ] pub struct S3OPA1_W < 'a > { w : & 'a mut W , } impl < 'a > S3OPA1_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 12 ) ) | ( ( ( value as u32 ) & 0x01 ) << 12 ) ; self . w } } # [ doc = "Reader of field `OPA1CAL_L`" ] pub type OPA1CAL_L_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA1CAL_L`" ] pub struct OPA1CAL_L_W < 'a > { w : & 'a mut W , } impl < 'a > OPA1CAL_L_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 13 ) ) | ( ( ( value as u32 ) & 0x01 ) << 13 ) ; self . w } } # [ doc = "Reader of field `OPA1CAL_H`" ] pub type OPA1CAL_H_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA1CAL_H`" ] pub struct OPA1CAL_H_W < 'a > { w : & 'a mut W , } impl < 'a > OPA1CAL_H_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 14 ) ) | ( ( ( value as u32 ) & 0x01 ) << 14 ) ; self . w } } # [ doc = "Reader of field `OPA1LPM`" ] pub type OPA1LPM_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA1LPM`" ] pub struct OPA1LPM_W < 'a > { w : & 'a mut W , } impl < 'a > OPA1LPM_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 15 ) ) | ( ( ( value as u32 ) & 0x01 ) << 15 ) ; self . w } } # [ doc = "Reader of field `OPA2PD`" ] pub type OPA2PD_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA2PD`" ] pub struct OPA2PD_W < 'a > { w : & 'a mut W , } impl < 'a > OPA2PD_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 16 ) ) | ( ( ( value as u32 ) & 0x01 ) << 16 ) ; self . w } } # [ doc = "Reader of field `T3OPA2`" ] pub type T3OPA2_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `T3OPA2`" ] pub struct T3OPA2_W < 'a > { w : & 'a mut W , } impl < 'a > T3OPA2_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 17 ) ) | ( ( ( value as u32 ) & 0x01 ) << 17 ) ; self . w } } # [ doc = "Reader of field `S1OPA2`" ] pub type S1OPA2_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `S1OPA2`" ] pub struct S1OPA2_W < 'a > { w : & 'a mut W , } impl < 'a > S1OPA2_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 18 ) ) | ( ( ( value as u32 ) & 0x01 ) << 18 ) ; self . w } } # [ doc = "Reader of field `S2OPA2`" ] pub type S2OPA2_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `S2OPA2`" ] pub struct S2OPA2_W < 'a > { w : & 'a mut W , } impl < 'a > S2OPA2_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 19 ) ) | ( ( ( value as u32 ) & 0x01 ) << 19 ) ; self . w } } # [ doc = "Reader of field `S3OPA2`" ] pub type S3OPA2_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `S3OPA2`" ] pub struct S3OPA2_W < 'a > { w : & 'a mut W , } impl < 'a > S3OPA2_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 20 ) ) | ( ( ( value as u32 ) & 0x01 ) << 20 ) ; self . w } } # [ doc = "Reader of field `OPA2CAL_L`" ] pub type OPA2CAL_L_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA2CAL_L`" ] pub struct OPA2CAL_L_W < 'a > { w : & 'a mut W , } impl < 'a > OPA2CAL_L_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 21 ) ) | ( ( ( value as u32 ) & 0x01 ) << 21 ) ; self . w } } # [ doc = "Reader of field `OPA2CAL_H`" ] pub type OPA2CAL_H_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA2CAL_H`" ] pub struct OPA2CAL_H_W < 'a > { w : & 'a mut W , } impl < 'a > OPA2CAL_H_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 22 ) ) | ( ( ( value as u32 ) & 0x01 ) << 22 ) ; self . w } } # [ doc = "Reader of field `OPA2LPM`" ] pub type OPA2LPM_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA2LPM`" ] pub struct OPA2LPM_W < 'a > { w : & 'a mut W , } impl < 'a > OPA2LPM_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 23 ) ) | ( ( ( value as u32 ) & 0x01 ) << 23 ) ; self . w } } # [ doc = "Reader of field `S4OPA1`" ] pub type S4OPA1_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `S4OPA1`" ] pub struct S4OPA1_W < 'a > { w : & 'a mut W , } impl < 'a > S4OPA1_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 27 ) ) | ( ( ( value as u32 ) & 0x01 ) << 27 ) ; self . w } } # [ doc = "Reader of field `OPA_RANGE`" ] pub type OPA_RANGE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA_RANGE`" ] pub struct OPA_RANGE_W < 'a > { w : & 'a mut W , } impl < 'a > OPA_RANGE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 28 ) ) | ( ( ( value as u32 ) & 0x01 ) << 28 ) ; self . w } } # [ doc = "Reader of field `OPA0CALOUT`" ] pub type OPA0CALOUT_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA0CALOUT`" ] pub struct OPA0CALOUT_W < 'a > { w : & 'a mut W , } impl < 'a > OPA0CALOUT_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 29 ) ) | ( ( ( value as u32 ) & 0x01 ) << 29 ) ; self . w } } # [ doc = "Reader of field `OPA1CALOUT`" ] pub type OPA1CALOUT_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA1CALOUT`" ] pub struct OPA1CALOUT_W < 'a > { w : & 'a mut W , } impl < 'a > OPA1CALOUT_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 30 ) ) | ( ( ( value as u32 ) & 0x01 ) << 30 ) ; self . w } } # [ doc = "Reader of field `OPA2CALOUT`" ] pub type OPA2CALOUT_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OPA2CALOUT`" ] pub struct OPA2CALOUT_W < 'a > { w : & 'a mut W , } impl < 'a > OPA2CALOUT_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 31 ) ) | ( ( ( value as u32 ) & 0x01 ) << 31 ) ; self . w } } impl R { # [ doc = "Bit 0 - OPA0 power down" ] # [ inline ( always ) ] pub fn opa0pd ( & self ) -> OPA0PD_R { OPA0PD_R :: new ( ( self . bits & 0x01 ) != 0 ) } # [ doc = "Bit 1 - T3 switch enable for OPA0" ] # [ inline ( always ) ] pub fn t3opa0 ( & self ) -> T3OPA0_R { T3OPA0_R :: new ( ( ( self . bits >> 1 ) & 0x01 ) != 0 ) } # [ doc = "Bit 2 - S1 switch enable for OPA0" ] # [ inline ( always ) ] pub fn s1opa0 ( & self ) -> S1OPA0_R { S1OPA0_R :: new ( ( ( self . bits >> 2 ) & 0x01 ) != 0 ) } # [ doc = "Bit 3 - S2 switch enable for OPA0" ] # [ inline ( always ) ] pub fn s2opa0 ( & self ) -> S2OPA0_R { S2OPA0_R :: new ( ( ( self . bits >> 3 ) & 0x01 ) != 0 ) } # [ doc = "Bit 4 - S3 switch enable for OPA0" ] # [ inline ( always ) ] pub fn s3opa0 ( & self ) -> S3OPA0_R { S3OPA0_R :: new ( ( ( self . bits >> 4 ) & 0x01 ) != 0 ) } # [ doc = "Bit 5 - OPA0 offset calibration for P diff" ] # [ inline ( always ) ] pub fn opa0cal_l ( & self ) -> OPA0CAL_L_R { OPA0CAL_L_R :: new ( ( ( self . bits >> 5 ) & 0x01 ) != 0 ) } # [ doc = "Bit 6 - OPA0 offset calibration for N diff" ] # [ inline ( always ) ] pub fn opa0cal_h ( & self ) -> OPA0CAL_H_R { OPA0CAL_H_R :: new ( ( ( self . bits >> 6 ) & 0x01 ) != 0 ) } # [ doc = "Bit 7 - OPA0 low power mode" ] # [ inline ( always ) ] pub fn opa0lpm ( & self ) -> OPA0LPM_R { OPA0LPM_R :: new ( ( ( self . bits >> 7 ) & 0x01 ) != 0 ) } # [ doc = "Bit 8 - OPA1 power down" ] # [ inline ( always ) ] pub fn opa1pd ( & self ) -> OPA1PD_R { OPA1PD_R :: new ( ( ( self . bits >> 8 ) & 0x01 ) != 0 ) } # [ doc = "Bit 9 - T3 switch enable for OPA1" ] # [ inline ( always ) ] pub fn t3opa1 ( & self ) -> T3OPA1_R { T3OPA1_R :: new ( ( ( self . bits >> 9 ) & 0x01 ) != 0 ) } # [ doc = "Bit 10 - S1 switch enable for OPA1" ] # [ inline ( always ) ] pub fn s1opa1 ( & self ) -> S1OPA1_R { S1OPA1_R :: new ( ( ( self . bits >> 10 ) & 0x01 ) != 0 ) } # [ doc = "Bit 11 - S2 switch enable for OPA1" ] # [ inline ( always ) ] pub fn s2opa1 ( & self ) -> S2OPA1_R { S2OPA1_R :: new ( ( ( self . bits >> 11 ) & 0x01 ) != 0 ) } # [ doc = "Bit 12 - S3 switch enable for OPA1" ] # [ inline ( always ) ] pub fn s3opa1 ( & self ) -> S3OPA1_R { S3OPA1_R :: new ( ( ( self . bits >> 12 ) & 0x01 ) != 0 ) } # [ doc = "Bit 13 - OPA1 offset calibration for P diff" ] # [ inline ( always ) ] pub fn opa1cal_l ( & self ) -> OPA1CAL_L_R { OPA1CAL_L_R :: new ( ( ( self . bits >> 13 ) & 0x01 ) != 0 ) } # [ doc = "Bit 14 - OPA1 offset calibration for N diff" ] # [ inline ( always ) ] pub fn opa1cal_h ( & self ) -> OPA1CAL_H_R { OPA1CAL_H_R :: new ( ( ( self . bits >> 14 ) & 0x01 ) != 0 ) } # [ doc = "Bit 15 - OPA1 low power mode" ] # [ inline ( always ) ] pub fn opa1lpm ( & self ) -> OPA1LPM_R { OPA1LPM_R :: new ( ( ( self . bits >> 15 ) & 0x01 ) != 0 ) } # [ doc = "Bit 16 - OPA2 power down" ] # [ inline ( always ) ] pub fn opa2pd ( & self ) -> OPA2PD_R { OPA2PD_R :: new ( ( ( self . bits >> 16 ) & 0x01 ) != 0 ) } # [ doc = "Bit 17 - T3 switch enable for OPA2" ] # [ inline ( always ) ] pub fn t3opa2 ( & self ) -> T3OPA2_R { T3OPA2_R :: new ( ( ( self . bits >> 17 ) & 0x01 ) != 0 ) } # [ doc = "Bit 18 - S1 switch enable for OPA2" ] # [ inline ( always ) ] pub fn s1opa2 ( & self ) -> S1OPA2_R { S1OPA2_R :: new ( ( ( self . bits >> 18 ) & 0x01 ) != 0 ) } # [ doc = "Bit 19 - S2 switch enable for OPA2" ] # [ inline ( always ) ] pub fn s2opa2 ( & self ) -> S2OPA2_R { S2OPA2_R :: new ( ( ( self . bits >> 19 ) & 0x01 ) != 0 ) } # [ doc = "Bit 20 - S3 switch enable for OPA2" ] # [ inline ( always ) ] pub fn s3opa2 ( & self ) -> S3OPA2_R { S3OPA2_R :: new ( ( ( self . bits >> 20 ) & 0x01 ) != 0 ) } # [ doc = "Bit 21 - OPA2 offset calibration for P diff" ] # [ inline ( always ) ] pub fn opa2cal_l ( & self ) -> OPA2CAL_L_R { OPA2CAL_L_R :: new ( ( ( self . bits >> 21 ) & 0x01 ) != 0 ) } # [ doc = "Bit 22 - OPA2 offset calibration for N diff" ] # [ inline ( always ) ] pub fn opa2cal_h ( & self ) -> OPA2CAL_H_R { OPA2CAL_H_R :: new ( ( ( self . bits >> 22 ) & 0x01 ) != 0 ) } # [ doc = "Bit 23 - OPA2 low power mode" ] # [ inline ( always ) ] pub fn opa2lpm ( & self ) -> OPA2LPM_R { OPA2LPM_R :: new ( ( ( self . bits >> 23 ) & 0x01 ) != 0 ) } # [ doc = "Bit 27 - S4 switch enable for OPA1" ] # [ inline ( always ) ] pub fn s4opa1 ( & self ) -> S4OPA1_R { S4OPA1_R :: new ( ( ( self . bits >> 27 ) & 0x01 ) != 0 ) } # [ doc = "Bit 28 - Power supply range" ] # [ inline ( always ) ] pub fn opa_range ( & self ) -> OPA_RANGE_R { OPA_RANGE_R :: new ( ( ( self . bits >> 28 ) & 0x01 ) != 0 ) } # [ doc = "Bit 29 - OPA0 calibration output" ] # [ inline ( always ) ] pub fn opa0calout ( & self ) -> OPA0CALOUT_R { OPA0CALOUT_R :: new ( ( ( self . bits >> 29 ) & 0x01 ) != 0 ) } # [ doc = "Bit 30 - OPA1 calibration output" ] # [ inline ( always ) ] pub fn opa1calout ( & self ) -> OPA1CALOUT_R { OPA1CALOUT_R :: new ( ( ( self . bits >> 30 ) & 0x01 ) != 0 ) } # [ doc = "Bit 31 - OPA2 calibration output" ] # [ inline ( always ) ] pub fn opa2calout ( & self ) -> OPA2CALOUT_R { OPA2CALOUT_R :: new ( ( ( self . bits >> 31 ) & 0x01 ) != 0 ) } } impl W { # [ doc = "Bit 0 - OPA0 power down" ] # [ inline ( always ) ] pub fn opa0pd ( & mut self ) -> OPA0PD_W { OPA0PD_W { w : self } } # [ doc = "Bit 1 - T3 switch enable for OPA0" ] # [ inline ( always ) ] pub fn t3opa0 ( & mut self ) -> T3OPA0_W { T3OPA0_W { w : self } } # [ doc = "Bit 2 - S1 switch enable for OPA0" ] # [ inline ( always ) ] pub fn s1opa0 ( & mut self ) -> S1OPA0_W { S1OPA0_W { w : self } } # [ doc = "Bit 3 - S2 switch enable for OPA0" ] # [ inline ( always ) ] pub fn s2opa0 ( & mut self ) -> S2OPA0_W { S2OPA0_W { w : self } } # [ doc = "Bit 4 - S3 switch enable for OPA0" ] # [ inline ( always ) ] pub fn s3opa0 ( & mut self ) -> S3OPA0_W { S3OPA0_W { w : self } } # [ doc = "Bit 5 - OPA0 offset calibration for P diff" ] # [ inline ( always ) ] pub fn opa0cal_l ( & mut self ) -> OPA0CAL_L_W { OPA0CAL_L_W { w : self } } # [ doc = "Bit 6 - OPA0 offset calibration for N diff" ] # [ inline ( always ) ] pub fn opa0cal_h ( & mut self ) -> OPA0CAL_H_W { OPA0CAL_H_W { w : self } } # [ doc = "Bit 7 - OPA0 low power mode" ] # [ inline ( always ) ] pub fn opa0lpm ( & mut self ) -> OPA0LPM_W { OPA0LPM_W { w : self } } # [ doc = "Bit 8 - OPA1 power down" ] # [ inline ( always ) ] pub fn opa1pd ( & mut self ) -> OPA1PD_W { OPA1PD_W { w : self } } # [ doc = "Bit 9 - T3 switch enable for OPA1" ] # [ inline ( always ) ] pub fn t3opa1 ( & mut self ) -> T3OPA1_W { T3OPA1_W { w : self } } # [ doc = "Bit 10 - S1 switch enable for OPA1" ] # [ inline ( always ) ] pub fn s1opa1 ( & mut self ) -> S1OPA1_W { S1OPA1_W { w : self } } # [ doc = "Bit 11 - S2 switch enable for OPA1" ] # [ inline ( always ) ] pub fn s2opa1 ( & mut self ) -> S2OPA1_W { S2OPA1_W { w : self } } # [ doc = "Bit 12 - S3 switch enable for OPA1" ] # [ inline ( always ) ] pub fn s3opa1 ( & mut self ) -> S3OPA1_W { S3OPA1_W { w : self } } # [ doc = "Bit 13 - OPA1 offset calibration for P diff" ] # [ inline ( always ) ] pub fn opa1cal_l ( & mut self ) -> OPA1CAL_L_W { OPA1CAL_L_W { w : self } } # [ doc = "Bit 14 - OPA1 offset calibration for N diff" ] # [ inline ( always ) ] pub fn opa1cal_h ( & mut self ) -> OPA1CAL_H_W { OPA1CAL_H_W { w : self } } # [ doc = "Bit 15 - OPA1 low power mode" ] # [ inline ( always ) ] pub fn opa1lpm ( & mut self ) -> OPA1LPM_W { OPA1LPM_W { w : self } } # [ doc = "Bit 16 - OPA2 power down" ] # [ inline ( always ) ] pub fn opa2pd ( & mut self ) -> OPA2PD_W { OPA2PD_W { w : self } } # [ doc = "Bit 17 - T3 switch enable for OPA2" ] # [ inline ( always ) ] pub fn t3opa2 ( & mut self ) -> T3OPA2_W { T3OPA2_W { w : self } } # [ doc = "Bit 18 - S1 switch enable for OPA2" ] # [ inline ( always ) ] pub fn s1opa2 ( & mut self ) -> S1OPA2_W { S1OPA2_W { w : self } } # [ doc = "Bit 19 - S2 switch enable for OPA2" ] # [ inline ( always ) ] pub fn s2opa2 ( & mut self ) -> S2OPA2_W { S2OPA2_W { w : self } } # [ doc = "Bit 20 - S3 switch enable for OPA2" ] # [ inline ( always ) ] pub fn s3opa2 ( & mut self ) -> S3OPA2_W { S3OPA2_W { w : self } } # [ doc = "Bit 21 - OPA2 offset calibration for P diff" ] # [ inline ( always ) ] pub fn opa2cal_l ( & mut self ) -> OPA2CAL_L_W { OPA2CAL_L_W { w : self } } # [ doc = "Bit 22 - OPA2 offset calibration for N diff" ] # [ inline ( always ) ] pub fn opa2cal_h ( & mut self ) -> OPA2CAL_H_W { OPA2CAL_H_W { w : self } } # [ doc = "Bit 23 - OPA2 low power mode" ] # [ inline ( always ) ] pub fn opa2lpm ( & mut self ) -> OPA2LPM_W { OPA2LPM_W { w : self } } # [ doc = "Bit 27 - S4 switch enable for OPA1" ] # [ inline ( always ) ] pub fn s4opa1 ( & mut self ) -> S4OPA1_W { S4OPA1_W { w : self } } # [ doc = "Bit 28 - Power supply range" ] # [ inline ( always ) ] pub fn opa_range ( & mut self ) -> OPA_RANGE_W { OPA_RANGE_W { w : self } } # [ doc = "Bit 29 - OPA0 calibration output" ] # [ inline ( always ) ] pub fn opa0calout ( & mut self ) -> OPA0CALOUT_W { OPA0CALOUT_W { w : self } } # [ doc = "Bit 30 - OPA1 calibration output" ] # [ inline ( always ) ] pub fn opa1calout ( & mut self ) -> OPA1CALOUT_W { OPA1CALOUT_W { w : self } } # [ doc = "Bit 31 - OPA2 calibration output" ] # [ inline ( always ) ] pub fn opa2calout ( & mut self ) -> OPA2CALOUT_W { OPA2CALOUT_W { w : self } } }