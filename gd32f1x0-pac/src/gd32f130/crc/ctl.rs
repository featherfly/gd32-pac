# [ doc = "Reader of register CTL" ] pub type R = crate :: R < u32 , super :: CTL > ; # [ doc = "Writer for register CTL" ] pub type W = crate :: W < u32 , super :: CTL > ; # [ doc = "Register CTL `reset()`'s with value 0" ] impl crate :: ResetValue for super :: CTL { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `RST`" ] pub type RST_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `RST`" ] pub struct RST_W < 'a > { w : & 'a mut W , } impl < 'a > RST_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x01 ) | ( ( value as u32 ) & 0x01 ) ; self . w } } # [ doc = "Reader of field `REV_I`" ] pub type REV_I_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `REV_I`" ] pub struct REV_I_W < 'a > { w : & 'a mut W , } impl < 'a > REV_I_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x03 << 5 ) ) | ( ( ( value as u32 ) & 0x03 ) << 5 ) ; self . w } } # [ doc = "Reader of field `REV_O`" ] pub type REV_O_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `REV_O`" ] pub struct REV_O_W < 'a > { w : & 'a mut W , } impl < 'a > REV_O_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 7 ) ) | ( ( ( value as u32 ) & 0x01 ) << 7 ) ; self . w } } impl R { # [ doc = "Bit 0 - reset bit" ] # [ inline ( always ) ] pub fn rst ( & self ) -> RST_R { RST_R :: new ( ( self . bits & 0x01 ) != 0 ) } # [ doc = "Bits 5:6 - Input Data Reverse Function" ] # [ inline ( always ) ] pub fn rev_i ( & self ) -> REV_I_R { REV_I_R :: new ( ( ( self . bits >> 5 ) & 0x03 ) as u8 ) } # [ doc = "Bit 7 - Output Data Reverse Function" ] # [ inline ( always ) ] pub fn rev_o ( & self ) -> REV_O_R { REV_O_R :: new ( ( ( self . bits >> 7 ) & 0x01 ) != 0 ) } } impl W { # [ doc = "Bit 0 - reset bit" ] # [ inline ( always ) ] pub fn rst ( & mut self ) -> RST_W { RST_W { w : self } } # [ doc = "Bits 5:6 - Input Data Reverse Function" ] # [ inline ( always ) ] pub fn rev_i ( & mut self ) -> REV_I_W { REV_I_W { w : self } } # [ doc = "Bit 7 - Output Data Reverse Function" ] # [ inline ( always ) ] pub fn rev_o ( & mut self ) -> REV_O_W { REV_O_W { w : self } } }