# [ doc = "Reader of register CTL0" ] pub type R = crate :: R < u32 , super :: CTL0 > ; # [ doc = "Writer for register CTL0" ] pub type W = crate :: W < u32 , super :: CTL0 > ; # [ doc = "Register CTL0 `reset()`'s with value 0" ] impl crate :: ResetValue for super :: CTL0 { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `EBIE`" ] pub type EBIE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `EBIE`" ] pub struct EBIE_W < 'a > { w : & 'a mut W , } impl < 'a > EBIE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 27 ) ) | ( ( ( value as u32 ) & 0x01 ) << 27 ) ; self . w } } # [ doc = "Reader of field `RTIE`" ] pub type RTIE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `RTIE`" ] pub struct RTIE_W < 'a > { w : & 'a mut W , } impl < 'a > RTIE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 26 ) ) | ( ( ( value as u32 ) & 0x01 ) << 26 ) ; self . w } } # [ doc = "Reader of field `DEA`" ] pub type DEA_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `DEA`" ] pub struct DEA_W < 'a > { w : & 'a mut W , } impl < 'a > DEA_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x1f << 21 ) ) | ( ( ( value as u32 ) & 0x1f ) << 21 ) ; self . w } } # [ doc = "Reader of field `DED`" ] pub type DED_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `DED`" ] pub struct DED_W < 'a > { w : & 'a mut W , } impl < 'a > DED_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x1f << 16 ) ) | ( ( ( value as u32 ) & 0x1f ) << 16 ) ; self . w } } # [ doc = "Reader of field `OVSMOD`" ] pub type OVSMOD_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `OVSMOD`" ] pub struct OVSMOD_W < 'a > { w : & 'a mut W , } impl < 'a > OVSMOD_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 15 ) ) | ( ( ( value as u32 ) & 0x01 ) << 15 ) ; self . w } } # [ doc = "Reader of field `AMIE`" ] pub type AMIE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `AMIE`" ] pub struct AMIE_W < 'a > { w : & 'a mut W , } impl < 'a > AMIE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 14 ) ) | ( ( ( value as u32 ) & 0x01 ) << 14 ) ; self . w } } # [ doc = "Reader of field `MEN`" ] pub type MEN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `MEN`" ] pub struct MEN_W < 'a > { w : & 'a mut W , } impl < 'a > MEN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 13 ) ) | ( ( ( value as u32 ) & 0x01 ) << 13 ) ; self . w } } # [ doc = "Reader of field `WL`" ] pub type WL_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `WL`" ] pub struct WL_W < 'a > { w : & 'a mut W , } impl < 'a > WL_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 12 ) ) | ( ( ( value as u32 ) & 0x01 ) << 12 ) ; self . w } } # [ doc = "Reader of field `WM`" ] pub type WM_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `WM`" ] pub struct WM_W < 'a > { w : & 'a mut W , } impl < 'a > WM_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 11 ) ) | ( ( ( value as u32 ) & 0x01 ) << 11 ) ; self . w } } # [ doc = "Reader of field `PCEN`" ] pub type PCEN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `PCEN`" ] pub struct PCEN_W < 'a > { w : & 'a mut W , } impl < 'a > PCEN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 10 ) ) | ( ( ( value as u32 ) & 0x01 ) << 10 ) ; self . w } } # [ doc = "Reader of field `PM`" ] pub type PM_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `PM`" ] pub struct PM_W < 'a > { w : & 'a mut W , } impl < 'a > PM_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 9 ) ) | ( ( ( value as u32 ) & 0x01 ) << 9 ) ; self . w } } # [ doc = "Reader of field `PERRIE`" ] pub type PERRIE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `PERRIE`" ] pub struct PERRIE_W < 'a > { w : & 'a mut W , } impl < 'a > PERRIE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 8 ) ) | ( ( ( value as u32 ) & 0x01 ) << 8 ) ; self . w } } # [ doc = "Reader of field `TBEIE`" ] pub type TBEIE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `TBEIE`" ] pub struct TBEIE_W < 'a > { w : & 'a mut W , } impl < 'a > TBEIE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 7 ) ) | ( ( ( value as u32 ) & 0x01 ) << 7 ) ; self . w } } # [ doc = "Reader of field `TCIE`" ] pub type TCIE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `TCIE`" ] pub struct TCIE_W < 'a > { w : & 'a mut W , } impl < 'a > TCIE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 6 ) ) | ( ( ( value as u32 ) & 0x01 ) << 6 ) ; self . w } } # [ doc = "Reader of field `RBNEIE`" ] pub type RBNEIE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `RBNEIE`" ] pub struct RBNEIE_W < 'a > { w : & 'a mut W , } impl < 'a > RBNEIE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 5 ) ) | ( ( ( value as u32 ) & 0x01 ) << 5 ) ; self . w } } # [ doc = "Reader of field `IDLEIE`" ] pub type IDLEIE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `IDLEIE`" ] pub struct IDLEIE_W < 'a > { w : & 'a mut W , } impl < 'a > IDLEIE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 4 ) ) | ( ( ( value as u32 ) & 0x01 ) << 4 ) ; self . w } } # [ doc = "Reader of field `TEN`" ] pub type TEN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `TEN`" ] pub struct TEN_W < 'a > { w : & 'a mut W , } impl < 'a > TEN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 3 ) ) | ( ( ( value as u32 ) & 0x01 ) << 3 ) ; self . w } } # [ doc = "Reader of field `REN`" ] pub type REN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `REN`" ] pub struct REN_W < 'a > { w : & 'a mut W , } impl < 'a > REN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 2 ) ) | ( ( ( value as u32 ) & 0x01 ) << 2 ) ; self . w } } # [ doc = "Reader of field `UESM`" ] pub type UESM_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `UESM`" ] pub struct UESM_W < 'a > { w : & 'a mut W , } impl < 'a > UESM_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 1 ) ) | ( ( ( value as u32 ) & 0x01 ) << 1 ) ; self . w } } # [ doc = "Reader of field `UEN`" ] pub type UEN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `UEN`" ] pub struct UEN_W < 'a > { w : & 'a mut W , } impl < 'a > UEN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x01 ) | ( ( value as u32 ) & 0x01 ) ; self . w } } impl R { # [ doc = "Bit 27 - End of Block interrupt enable" ] # [ inline ( always ) ] pub fn ebie ( & self ) -> EBIE_R { EBIE_R :: new ( ( ( self . bits >> 27 ) & 0x01 ) != 0 ) } # [ doc = "Bit 26 - Receiver timeout interrupt enable" ] # [ inline ( always ) ] pub fn rtie ( & self ) -> RTIE_R { RTIE_R :: new ( ( ( self . bits >> 26 ) & 0x01 ) != 0 ) } # [ doc = "Bits 21:25 - Driver Enable assertion time" ] # [ inline ( always ) ] pub fn dea ( & self ) -> DEA_R { DEA_R :: new ( ( ( self . bits >> 21 ) & 0x1f ) as u8 ) } # [ doc = "Bits 16:20 - Driver Enable deassertion time" ] # [ inline ( always ) ] pub fn ded ( & self ) -> DED_R { DED_R :: new ( ( ( self . bits >> 16 ) & 0x1f ) as u8 ) } # [ doc = "Bit 15 - Oversampling mode" ] # [ inline ( always ) ] pub fn ovsmod ( & self ) -> OVSMOD_R { OVSMOD_R :: new ( ( ( self . bits >> 15 ) & 0x01 ) != 0 ) } # [ doc = "Bit 14 - ADDR match interrupt enable" ] # [ inline ( always ) ] pub fn amie ( & self ) -> AMIE_R { AMIE_R :: new ( ( ( self . bits >> 14 ) & 0x01 ) != 0 ) } # [ doc = "Bit 13 - Mute mode enable" ] # [ inline ( always ) ] pub fn men ( & self ) -> MEN_R { MEN_R :: new ( ( ( self . bits >> 13 ) & 0x01 ) != 0 ) } # [ doc = "Bit 12 - Word length" ] # [ inline ( always ) ] pub fn wl ( & self ) -> WL_R { WL_R :: new ( ( ( self . bits >> 12 ) & 0x01 ) != 0 ) } # [ doc = "Bit 11 - Wakeup method in mute mode" ] # [ inline ( always ) ] pub fn wm ( & self ) -> WM_R { WM_R :: new ( ( ( self . bits >> 11 ) & 0x01 ) != 0 ) } # [ doc = "Bit 10 - Parity control enable" ] # [ inline ( always ) ] pub fn pcen ( & self ) -> PCEN_R { PCEN_R :: new ( ( ( self . bits >> 10 ) & 0x01 ) != 0 ) } # [ doc = "Bit 9 - Parity selection" ] # [ inline ( always ) ] pub fn pm ( & self ) -> PM_R { PM_R :: new ( ( ( self . bits >> 9 ) & 0x01 ) != 0 ) } # [ doc = "Bit 8 - Parity error interrupt enable" ] # [ inline ( always ) ] pub fn perrie ( & self ) -> PERRIE_R { PERRIE_R :: new ( ( ( self . bits >> 8 ) & 0x01 ) != 0 ) } # [ doc = "Bit 7 - Transmitter register empty interrupt enable" ] # [ inline ( always ) ] pub fn tbeie ( & self ) -> TBEIE_R { TBEIE_R :: new ( ( ( self . bits >> 7 ) & 0x01 ) != 0 ) } # [ doc = "Bit 6 - Transmission complete interrupt enable" ] # [ inline ( always ) ] pub fn tcie ( & self ) -> TCIE_R { TCIE_R :: new ( ( ( self . bits >> 6 ) & 0x01 ) != 0 ) } # [ doc = "Bit 5 - Read data buffer not empty interrupt and overrun error interrupt enable" ] # [ inline ( always ) ] pub fn rbneie ( & self ) -> RBNEIE_R { RBNEIE_R :: new ( ( ( self . bits >> 5 ) & 0x01 ) != 0 ) } # [ doc = "Bit 4 - IDLE line detected interrupt enable" ] # [ inline ( always ) ] pub fn idleie ( & self ) -> IDLEIE_R { IDLEIE_R :: new ( ( ( self . bits >> 4 ) & 0x01 ) != 0 ) } # [ doc = "Bit 3 - Transmitter enable" ] # [ inline ( always ) ] pub fn ten ( & self ) -> TEN_R { TEN_R :: new ( ( ( self . bits >> 3 ) & 0x01 ) != 0 ) } # [ doc = "Bit 2 - Receiver enable" ] # [ inline ( always ) ] pub fn ren ( & self ) -> REN_R { REN_R :: new ( ( ( self . bits >> 2 ) & 0x01 ) != 0 ) } # [ doc = "Bit 1 - USART enable in Deep-sleep mode" ] # [ inline ( always ) ] pub fn uesm ( & self ) -> UESM_R { UESM_R :: new ( ( ( self . bits >> 1 ) & 0x01 ) != 0 ) } # [ doc = "Bit 0 - USART enable" ] # [ inline ( always ) ] pub fn uen ( & self ) -> UEN_R { UEN_R :: new ( ( self . bits & 0x01 ) != 0 ) } } impl W { # [ doc = "Bit 27 - End of Block interrupt enable" ] # [ inline ( always ) ] pub fn ebie ( & mut self ) -> EBIE_W { EBIE_W { w : self } } # [ doc = "Bit 26 - Receiver timeout interrupt enable" ] # [ inline ( always ) ] pub fn rtie ( & mut self ) -> RTIE_W { RTIE_W { w : self } } # [ doc = "Bits 21:25 - Driver Enable assertion time" ] # [ inline ( always ) ] pub fn dea ( & mut self ) -> DEA_W { DEA_W { w : self } } # [ doc = "Bits 16:20 - Driver Enable deassertion time" ] # [ inline ( always ) ] pub fn ded ( & mut self ) -> DED_W { DED_W { w : self } } # [ doc = "Bit 15 - Oversampling mode" ] # [ inline ( always ) ] pub fn ovsmod ( & mut self ) -> OVSMOD_W { OVSMOD_W { w : self } } # [ doc = "Bit 14 - ADDR match interrupt enable" ] # [ inline ( always ) ] pub fn amie ( & mut self ) -> AMIE_W { AMIE_W { w : self } } # [ doc = "Bit 13 - Mute mode enable" ] # [ inline ( always ) ] pub fn men ( & mut self ) -> MEN_W { MEN_W { w : self } } # [ doc = "Bit 12 - Word length" ] # [ inline ( always ) ] pub fn wl ( & mut self ) -> WL_W { WL_W { w : self } } # [ doc = "Bit 11 - Wakeup method in mute mode" ] # [ inline ( always ) ] pub fn wm ( & mut self ) -> WM_W { WM_W { w : self } } # [ doc = "Bit 10 - Parity control enable" ] # [ inline ( always ) ] pub fn pcen ( & mut self ) -> PCEN_W { PCEN_W { w : self } } # [ doc = "Bit 9 - Parity selection" ] # [ inline ( always ) ] pub fn pm ( & mut self ) -> PM_W { PM_W { w : self } } # [ doc = "Bit 8 - Parity error interrupt enable" ] # [ inline ( always ) ] pub fn perrie ( & mut self ) -> PERRIE_W { PERRIE_W { w : self } } # [ doc = "Bit 7 - Transmitter register empty interrupt enable" ] # [ inline ( always ) ] pub fn tbeie ( & mut self ) -> TBEIE_W { TBEIE_W { w : self } } # [ doc = "Bit 6 - Transmission complete interrupt enable" ] # [ inline ( always ) ] pub fn tcie ( & mut self ) -> TCIE_W { TCIE_W { w : self } } # [ doc = "Bit 5 - Read data buffer not empty interrupt and overrun error interrupt enable" ] # [ inline ( always ) ] pub fn rbneie ( & mut self ) -> RBNEIE_W { RBNEIE_W { w : self } } # [ doc = "Bit 4 - IDLE line detected interrupt enable" ] # [ inline ( always ) ] pub fn idleie ( & mut self ) -> IDLEIE_W { IDLEIE_W { w : self } } # [ doc = "Bit 3 - Transmitter enable" ] # [ inline ( always ) ] pub fn ten ( & mut self ) -> TEN_W { TEN_W { w : self } } # [ doc = "Bit 2 - Receiver enable" ] # [ inline ( always ) ] pub fn ren ( & mut self ) -> REN_W { REN_W { w : self } } # [ doc = "Bit 1 - USART enable in Deep-sleep mode" ] # [ inline ( always ) ] pub fn uesm ( & mut self ) -> UESM_W { UESM_W { w : self } } # [ doc = "Bit 0 - USART enable" ] # [ inline ( always ) ] pub fn uen ( & mut self ) -> UEN_W { UEN_W { w : self } } }