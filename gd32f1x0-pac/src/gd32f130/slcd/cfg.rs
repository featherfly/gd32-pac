# [ doc = "Reader of register CFG" ] pub type R = crate :: R < u32 , super :: CFG > ; # [ doc = "Writer for register CFG" ] pub type W = crate :: W < u32 , super :: CFG > ; # [ doc = "Register CFG `reset()`'s with value 0" ] impl crate :: ResetValue for super :: CFG { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `HDEN`" ] pub type HDEN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `HDEN`" ] pub struct HDEN_W < 'a > { w : & 'a mut W , } impl < 'a > HDEN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x01 ) | ( ( value as u32 ) & 0x01 ) ; self . w } } # [ doc = "Reader of field `SOFIE`" ] pub type SOFIE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `SOFIE`" ] pub struct SOFIE_W < 'a > { w : & 'a mut W , } impl < 'a > SOFIE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 1 ) ) | ( ( ( value as u32 ) & 0x01 ) << 1 ) ; self . w } } # [ doc = "Reader of field `UPDIE`" ] pub type UPDIE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `UPDIE`" ] pub struct UPDIE_W < 'a > { w : & 'a mut W , } impl < 'a > UPDIE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 3 ) ) | ( ( ( value as u32 ) & 0x01 ) << 3 ) ; self . w } } # [ doc = "Reader of field `PULSE`" ] pub type PULSE_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `PULSE`" ] pub struct PULSE_W < 'a > { w : & 'a mut W , } impl < 'a > PULSE_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x07 << 4 ) ) | ( ( ( value as u32 ) & 0x07 ) << 4 ) ; self . w } } # [ doc = "Reader of field `DTD`" ] pub type DTD_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `DTD`" ] pub struct DTD_W < 'a > { w : & 'a mut W , } impl < 'a > DTD_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x07 << 7 ) ) | ( ( ( value as u32 ) & 0x07 ) << 7 ) ; self . w } } # [ doc = "Reader of field `CONR`" ] pub type CONR_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `CONR`" ] pub struct CONR_W < 'a > { w : & 'a mut W , } impl < 'a > CONR_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x07 << 10 ) ) | ( ( ( value as u32 ) & 0x07 ) << 10 ) ; self . w } } # [ doc = "Reader of field `BLKDIV`" ] pub type BLKDIV_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `BLKDIV`" ] pub struct BLKDIV_W < 'a > { w : & 'a mut W , } impl < 'a > BLKDIV_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x07 << 13 ) ) | ( ( ( value as u32 ) & 0x07 ) << 13 ) ; self . w } } # [ doc = "Reader of field `BLKMOD`" ] pub type BLKMOD_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `BLKMOD`" ] pub struct BLKMOD_W < 'a > { w : & 'a mut W , } impl < 'a > BLKMOD_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x03 << 16 ) ) | ( ( ( value as u32 ) & 0x03 ) << 16 ) ; self . w } } # [ doc = "Reader of field `DIV`" ] pub type DIV_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `DIV`" ] pub struct DIV_W < 'a > { w : & 'a mut W , } impl < 'a > DIV_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 18 ) ) | ( ( ( value as u32 ) & 0x0f ) << 18 ) ; self . w } } # [ doc = "Reader of field `PSC`" ] pub type PSC_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `PSC`" ] pub struct PSC_W < 'a > { w : & 'a mut W , } impl < 'a > PSC_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 22 ) ) | ( ( ( value as u32 ) & 0x0f ) << 22 ) ; self . w } } impl R { # [ doc = "Bit 0 - High drive enable" ] # [ inline ( always ) ] pub fn hden ( & self ) -> HDEN_R { HDEN_R :: new ( ( self . bits & 0x01 ) != 0 ) } # [ doc = "Bit 1 - Start of frame interrupt enable" ] # [ inline ( always ) ] pub fn sofie ( & self ) -> SOFIE_R { SOFIE_R :: new ( ( ( self . bits >> 1 ) & 0x01 ) != 0 ) } # [ doc = "Bit 3 - SLCD update done interrupt enable" ] # [ inline ( always ) ] pub fn updie ( & self ) -> UPDIE_R { UPDIE_R :: new ( ( ( self . bits >> 3 ) & 0x01 ) != 0 ) } # [ doc = "Bits 4:6 - Pulse on duration" ] # [ inline ( always ) ] pub fn pulse ( & self ) -> PULSE_R { PULSE_R :: new ( ( ( self . bits >> 4 ) & 0x07 ) as u8 ) } # [ doc = "Bits 7:9 - Dead time duration" ] # [ inline ( always ) ] pub fn dtd ( & self ) -> DTD_R { DTD_R :: new ( ( ( self . bits >> 7 ) & 0x07 ) as u8 ) } # [ doc = "Bits 10:12 - Contrast ratio" ] # [ inline ( always ) ] pub fn conr ( & self ) -> CONR_R { CONR_R :: new ( ( ( self . bits >> 10 ) & 0x07 ) as u8 ) } # [ doc = "Bits 13:15 - Blink frequency divider" ] # [ inline ( always ) ] pub fn blkdiv ( & self ) -> BLKDIV_R { BLKDIV_R :: new ( ( ( self . bits >> 13 ) & 0x07 ) as u8 ) } # [ doc = "Bits 16:17 - Blink mode" ] # [ inline ( always ) ] pub fn blkmod ( & self ) -> BLKMOD_R { BLKMOD_R :: new ( ( ( self . bits >> 16 ) & 0x03 ) as u8 ) } # [ doc = "Bits 18:21 - SLCD clock divider" ] # [ inline ( always ) ] pub fn div ( & self ) -> DIV_R { DIV_R :: new ( ( ( self . bits >> 18 ) & 0x0f ) as u8 ) } # [ doc = "Bits 22:25 - SLCD clock prescaler" ] # [ inline ( always ) ] pub fn psc ( & self ) -> PSC_R { PSC_R :: new ( ( ( self . bits >> 22 ) & 0x0f ) as u8 ) } } impl W { # [ doc = "Bit 0 - High drive enable" ] # [ inline ( always ) ] pub fn hden ( & mut self ) -> HDEN_W { HDEN_W { w : self } } # [ doc = "Bit 1 - Start of frame interrupt enable" ] # [ inline ( always ) ] pub fn sofie ( & mut self ) -> SOFIE_W { SOFIE_W { w : self } } # [ doc = "Bit 3 - SLCD update done interrupt enable" ] # [ inline ( always ) ] pub fn updie ( & mut self ) -> UPDIE_W { UPDIE_W { w : self } } # [ doc = "Bits 4:6 - Pulse on duration" ] # [ inline ( always ) ] pub fn pulse ( & mut self ) -> PULSE_W { PULSE_W { w : self } } # [ doc = "Bits 7:9 - Dead time duration" ] # [ inline ( always ) ] pub fn dtd ( & mut self ) -> DTD_W { DTD_W { w : self } } # [ doc = "Bits 10:12 - Contrast ratio" ] # [ inline ( always ) ] pub fn conr ( & mut self ) -> CONR_W { CONR_W { w : self } } # [ doc = "Bits 13:15 - Blink frequency divider" ] # [ inline ( always ) ] pub fn blkdiv ( & mut self ) -> BLKDIV_W { BLKDIV_W { w : self } } # [ doc = "Bits 16:17 - Blink mode" ] # [ inline ( always ) ] pub fn blkmod ( & mut self ) -> BLKMOD_W { BLKMOD_W { w : self } } # [ doc = "Bits 18:21 - SLCD clock divider" ] # [ inline ( always ) ] pub fn div ( & mut self ) -> DIV_W { DIV_W { w : self } } # [ doc = "Bits 22:25 - SLCD clock prescaler" ] # [ inline ( always ) ] pub fn psc ( & mut self ) -> PSC_W { PSC_W { w : self } } }