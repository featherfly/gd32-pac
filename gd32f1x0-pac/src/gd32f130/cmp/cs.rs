# [ doc = "Reader of register CS" ] pub type R = crate :: R < u32 , super :: CS > ; # [ doc = "Writer for register CS" ] pub type W = crate :: W < u32 , super :: CS > ; # [ doc = "Register CS `reset()`'s with value 0" ] impl crate :: ResetValue for super :: CS { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `CMP0EN`" ] pub type CMP0EN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `CMP0EN`" ] pub struct CMP0EN_W < 'a > { w : & 'a mut W , } impl < 'a > CMP0EN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x01 ) | ( ( value as u32 ) & 0x01 ) ; self . w } } # [ doc = "Reader of field `CMP0S`" ] pub type CMP0S_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `CMP0S`" ] pub struct CMP0S_W < 'a > { w : & 'a mut W , } impl < 'a > CMP0S_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 1 ) ) | ( ( ( value as u32 ) & 0x01 ) << 1 ) ; self . w } } # [ doc = "Reader of field `CMP0M`" ] pub type CMP0M_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `CMP0M`" ] pub struct CMP0M_W < 'a > { w : & 'a mut W , } impl < 'a > CMP0M_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x03 << 2 ) ) | ( ( ( value as u32 ) & 0x03 ) << 2 ) ; self . w } } # [ doc = "Reader of field `CMP0MSEL`" ] pub type CMP0MSEL_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `CMP0MSEL`" ] pub struct CMP0MSEL_W < 'a > { w : & 'a mut W , } impl < 'a > CMP0MSEL_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x07 << 4 ) ) | ( ( ( value as u32 ) & 0x07 ) << 4 ) ; self . w } } # [ doc = "Reader of field `CMP0OSEL`" ] pub type CMP0OSEL_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `CMP0OSEL`" ] pub struct CMP0OSEL_W < 'a > { w : & 'a mut W , } impl < 'a > CMP0OSEL_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x07 << 8 ) ) | ( ( ( value as u32 ) & 0x07 ) << 8 ) ; self . w } } # [ doc = "Reader of field `CMP0PL`" ] pub type CMP0PL_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `CMP0PL`" ] pub struct CMP0PL_W < 'a > { w : & 'a mut W , } impl < 'a > CMP0PL_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 11 ) ) | ( ( ( value as u32 ) & 0x01 ) << 11 ) ; self . w } } # [ doc = "Reader of field `CMP0HST`" ] pub type CMP0HST_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `CMP0HST`" ] pub struct CMP0HST_W < 'a > { w : & 'a mut W , } impl < 'a > CMP0HST_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x03 << 12 ) ) | ( ( ( value as u32 ) & 0x03 ) << 12 ) ; self . w } } # [ doc = "Reader of field `CMP0O`" ] pub type CMP0O_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `CMP0LK`" ] pub type CMP0LK_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `CMP0LK`" ] pub struct CMP0LK_W < 'a > { w : & 'a mut W , } impl < 'a > CMP0LK_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 15 ) ) | ( ( ( value as u32 ) & 0x01 ) << 15 ) ; self . w } } # [ doc = "Reader of field `CMP1EN`" ] pub type CMP1EN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `CMP1EN`" ] pub struct CMP1EN_W < 'a > { w : & 'a mut W , } impl < 'a > CMP1EN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 16 ) ) | ( ( ( value as u32 ) & 0x01 ) << 16 ) ; self . w } } # [ doc = "Reader of field `CMP1M`" ] pub type CMP1M_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `CMP1M`" ] pub struct CMP1M_W < 'a > { w : & 'a mut W , } impl < 'a > CMP1M_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x03 << 18 ) ) | ( ( ( value as u32 ) & 0x03 ) << 18 ) ; self . w } } # [ doc = "Reader of field `CMP1MSEL`" ] pub type CMP1MSEL_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `CMP1MSEL`" ] pub struct CMP1MSEL_W < 'a > { w : & 'a mut W , } impl < 'a > CMP1MSEL_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x07 << 20 ) ) | ( ( ( value as u32 ) & 0x07 ) << 20 ) ; self . w } } # [ doc = "Reader of field `WNDEN`" ] pub type WNDEN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `WNDEN`" ] pub struct WNDEN_W < 'a > { w : & 'a mut W , } impl < 'a > WNDEN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 23 ) ) | ( ( ( value as u32 ) & 0x01 ) << 23 ) ; self . w } } # [ doc = "Reader of field `CMP1OSEL`" ] pub type CMP1OSEL_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `CMP1OSEL`" ] pub struct CMP1OSEL_W < 'a > { w : & 'a mut W , } impl < 'a > CMP1OSEL_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x07 << 24 ) ) | ( ( ( value as u32 ) & 0x07 ) << 24 ) ; self . w } } # [ doc = "Reader of field `CMP1PL`" ] pub type CMP1PL_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `CMP1PL`" ] pub struct CMP1PL_W < 'a > { w : & 'a mut W , } impl < 'a > CMP1PL_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 27 ) ) | ( ( ( value as u32 ) & 0x01 ) << 27 ) ; self . w } } # [ doc = "Reader of field `CMP1HST`" ] pub type CMP1HST_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `CMP1HST`" ] pub struct CMP1HST_W < 'a > { w : & 'a mut W , } impl < 'a > CMP1HST_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x03 << 28 ) ) | ( ( ( value as u32 ) & 0x03 ) << 28 ) ; self . w } } # [ doc = "Reader of field `CMP1O`" ] pub type CMP1O_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `CMP1LK`" ] pub type CMP1LK_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `CMP1LK`" ] pub struct CMP1LK_W < 'a > { w : & 'a mut W , } impl < 'a > CMP1LK_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 31 ) ) | ( ( ( value as u32 ) & 0x01 ) << 31 ) ; self . w } } impl R { # [ doc = "Bit 0 - CMP0 enable" ] # [ inline ( always ) ] pub fn cmp0en ( & self ) -> CMP0EN_R { CMP0EN_R :: new ( ( self . bits & 0x01 ) != 0 ) } # [ doc = "Bit 1 - CMP0 switch" ] # [ inline ( always ) ] pub fn cmp0s ( & self ) -> CMP0S_R { CMP0S_R :: new ( ( ( self . bits >> 1 ) & 0x01 ) != 0 ) } # [ doc = "Bits 2:3 - CMP0 mode" ] # [ inline ( always ) ] pub fn cmp0m ( & self ) -> CMP0M_R { CMP0M_R :: new ( ( ( self . bits >> 2 ) & 0x03 ) as u8 ) } # [ doc = "Bits 4:6 - CMP0_M input selection" ] # [ inline ( always ) ] pub fn cmp0msel ( & self ) -> CMP0MSEL_R { CMP0MSEL_R :: new ( ( ( self . bits >> 4 ) & 0x07 ) as u8 ) } # [ doc = "Bits 8:10 - Comparator 0 output selection" ] # [ inline ( always ) ] pub fn cmp0osel ( & self ) -> CMP0OSEL_R { CMP0OSEL_R :: new ( ( ( self . bits >> 8 ) & 0x07 ) as u8 ) } # [ doc = "Bit 11 - Polarity of CMP0 output" ] # [ inline ( always ) ] pub fn cmp0pl ( & self ) -> CMP0PL_R { CMP0PL_R :: new ( ( ( self . bits >> 11 ) & 0x01 ) != 0 ) } # [ doc = "Bits 12:13 - CMP0 hysteresis" ] # [ inline ( always ) ] pub fn cmp0hst ( & self ) -> CMP0HST_R { CMP0HST_R :: new ( ( ( self . bits >> 12 ) & 0x03 ) as u8 ) } # [ doc = "Bit 14 - CMP0 output" ] # [ inline ( always ) ] pub fn cmp0o ( & self ) -> CMP0O_R { CMP0O_R :: new ( ( ( self . bits >> 14 ) & 0x01 ) != 0 ) } # [ doc = "Bit 15 - CMP0 lock" ] # [ inline ( always ) ] pub fn cmp0lk ( & self ) -> CMP0LK_R { CMP0LK_R :: new ( ( ( self . bits >> 15 ) & 0x01 ) != 0 ) } # [ doc = "Bit 16 - CMP1 enable" ] # [ inline ( always ) ] pub fn cmp1en ( & self ) -> CMP1EN_R { CMP1EN_R :: new ( ( ( self . bits >> 16 ) & 0x01 ) != 0 ) } # [ doc = "Bits 18:19 - CMP1 mode" ] # [ inline ( always ) ] pub fn cmp1m ( & self ) -> CMP1M_R { CMP1M_R :: new ( ( ( self . bits >> 18 ) & 0x03 ) as u8 ) } # [ doc = "Bits 20:22 - CMP1_M input selection" ] # [ inline ( always ) ] pub fn cmp1msel ( & self ) -> CMP1MSEL_R { CMP1MSEL_R :: new ( ( ( self . bits >> 20 ) & 0x07 ) as u8 ) } # [ doc = "Bit 23 - Window mode enable" ] # [ inline ( always ) ] pub fn wnden ( & self ) -> WNDEN_R { WNDEN_R :: new ( ( ( self . bits >> 23 ) & 0x01 ) != 0 ) } # [ doc = "Bits 24:26 - CMP1 output selection" ] # [ inline ( always ) ] pub fn cmp1osel ( & self ) -> CMP1OSEL_R { CMP1OSEL_R :: new ( ( ( self . bits >> 24 ) & 0x07 ) as u8 ) } # [ doc = "Bit 27 - Polarity of CMP1 output" ] # [ inline ( always ) ] pub fn cmp1pl ( & self ) -> CMP1PL_R { CMP1PL_R :: new ( ( ( self . bits >> 27 ) & 0x01 ) != 0 ) } # [ doc = "Bits 28:29 - CMP1 hysteresis" ] # [ inline ( always ) ] pub fn cmp1hst ( & self ) -> CMP1HST_R { CMP1HST_R :: new ( ( ( self . bits >> 28 ) & 0x03 ) as u8 ) } # [ doc = "Bit 30 - CMP1 output" ] # [ inline ( always ) ] pub fn cmp1o ( & self ) -> CMP1O_R { CMP1O_R :: new ( ( ( self . bits >> 30 ) & 0x01 ) != 0 ) } # [ doc = "Bit 31 - CMP1 lock" ] # [ inline ( always ) ] pub fn cmp1lk ( & self ) -> CMP1LK_R { CMP1LK_R :: new ( ( ( self . bits >> 31 ) & 0x01 ) != 0 ) } } impl W { # [ doc = "Bit 0 - CMP0 enable" ] # [ inline ( always ) ] pub fn cmp0en ( & mut self ) -> CMP0EN_W { CMP0EN_W { w : self } } # [ doc = "Bit 1 - CMP0 switch" ] # [ inline ( always ) ] pub fn cmp0s ( & mut self ) -> CMP0S_W { CMP0S_W { w : self } } # [ doc = "Bits 2:3 - CMP0 mode" ] # [ inline ( always ) ] pub fn cmp0m ( & mut self ) -> CMP0M_W { CMP0M_W { w : self } } # [ doc = "Bits 4:6 - CMP0_M input selection" ] # [ inline ( always ) ] pub fn cmp0msel ( & mut self ) -> CMP0MSEL_W { CMP0MSEL_W { w : self } } # [ doc = "Bits 8:10 - Comparator 0 output selection" ] # [ inline ( always ) ] pub fn cmp0osel ( & mut self ) -> CMP0OSEL_W { CMP0OSEL_W { w : self } } # [ doc = "Bit 11 - Polarity of CMP0 output" ] # [ inline ( always ) ] pub fn cmp0pl ( & mut self ) -> CMP0PL_W { CMP0PL_W { w : self } } # [ doc = "Bits 12:13 - CMP0 hysteresis" ] # [ inline ( always ) ] pub fn cmp0hst ( & mut self ) -> CMP0HST_W { CMP0HST_W { w : self } } # [ doc = "Bit 15 - CMP0 lock" ] # [ inline ( always ) ] pub fn cmp0lk ( & mut self ) -> CMP0LK_W { CMP0LK_W { w : self } } # [ doc = "Bit 16 - CMP1 enable" ] # [ inline ( always ) ] pub fn cmp1en ( & mut self ) -> CMP1EN_W { CMP1EN_W { w : self } } # [ doc = "Bits 18:19 - CMP1 mode" ] # [ inline ( always ) ] pub fn cmp1m ( & mut self ) -> CMP1M_W { CMP1M_W { w : self } } # [ doc = "Bits 20:22 - CMP1_M input selection" ] # [ inline ( always ) ] pub fn cmp1msel ( & mut self ) -> CMP1MSEL_W { CMP1MSEL_W { w : self } } # [ doc = "Bit 23 - Window mode enable" ] # [ inline ( always ) ] pub fn wnden ( & mut self ) -> WNDEN_W { WNDEN_W { w : self } } # [ doc = "Bits 24:26 - CMP1 output selection" ] # [ inline ( always ) ] pub fn cmp1osel ( & mut self ) -> CMP1OSEL_W { CMP1OSEL_W { w : self } } # [ doc = "Bit 27 - Polarity of CMP1 output" ] # [ inline ( always ) ] pub fn cmp1pl ( & mut self ) -> CMP1PL_W { CMP1PL_W { w : self } } # [ doc = "Bits 28:29 - CMP1 hysteresis" ] # [ inline ( always ) ] pub fn cmp1hst ( & mut self ) -> CMP1HST_W { CMP1HST_W { w : self } } # [ doc = "Bit 31 - CMP1 lock" ] # [ inline ( always ) ] pub fn cmp1lk ( & mut self ) -> CMP1LK_W { CMP1LK_W { w : self } } }