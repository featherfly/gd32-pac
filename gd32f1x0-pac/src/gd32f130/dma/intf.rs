# [ doc = "Reader of register INTF" ] pub type R = crate :: R < u32 , super :: INTF > ; # [ doc = "Reader of field `GIF0`" ] pub type GIF0_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `FTFIF0`" ] pub type FTFIF0_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `HTFIF0`" ] pub type HTFIF0_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `TAEIF0`" ] pub type TAEIF0_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GIF1`" ] pub type GIF1_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `FTFIF1`" ] pub type FTFIF1_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `HTFIF1`" ] pub type HTFIF1_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `TAEIF1`" ] pub type TAEIF1_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GIF2`" ] pub type GIF2_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `FTFIF2`" ] pub type FTFIF2_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `HTFIF2`" ] pub type HTFIF2_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `TAEIF2`" ] pub type TAEIF2_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GIF3`" ] pub type GIF3_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `FTFIF3`" ] pub type FTFIF3_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `HTFIF3`" ] pub type HTFIF3_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `TAEIF3`" ] pub type TAEIF3_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GIF4`" ] pub type GIF4_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `FTFIF4`" ] pub type FTFIF4_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `HTFIF4`" ] pub type HTFIF4_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `TAEIF4`" ] pub type TAEIF4_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GIF5`" ] pub type GIF5_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `FTFIF5`" ] pub type FTFIF5_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `HTFIF5`" ] pub type HTFIF5_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `TAEIF5`" ] pub type TAEIF5_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GIF6`" ] pub type GIF6_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `FTFIF6`" ] pub type FTFIF6_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `HTFIF6`" ] pub type HTFIF6_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `TAEIF6`" ] pub type TAEIF6_R = crate :: R < bool , bool > ; impl R { # [ doc = "Bit 0 - Global interrupt flag of channel 0" ] # [ inline ( always ) ] pub fn gif0 ( & self ) -> GIF0_R { GIF0_R :: new ( ( self . bits & 0x01 ) != 0 ) } # [ doc = "Bit 1 - Full transfer finish flag of channel 0" ] # [ inline ( always ) ] pub fn ftfif0 ( & self ) -> FTFIF0_R { FTFIF0_R :: new ( ( ( self . bits >> 1 ) & 0x01 ) != 0 ) } # [ doc = "Bit 2 - Half transfer finish flag of channel 0" ] # [ inline ( always ) ] pub fn htfif0 ( & self ) -> HTFIF0_R { HTFIF0_R :: new ( ( ( self . bits >> 2 ) & 0x01 ) != 0 ) } # [ doc = "Bit 3 - Transfer access error flag of channel 0" ] # [ inline ( always ) ] pub fn taeif0 ( & self ) -> TAEIF0_R { TAEIF0_R :: new ( ( ( self . bits >> 3 ) & 0x01 ) != 0 ) } # [ doc = "Bit 4 - Global interrupt flag of channel 1" ] # [ inline ( always ) ] pub fn gif1 ( & self ) -> GIF1_R { GIF1_R :: new ( ( ( self . bits >> 4 ) & 0x01 ) != 0 ) } # [ doc = "Bit 5 - Full transfer finish flag of channel 1" ] # [ inline ( always ) ] pub fn ftfif1 ( & self ) -> FTFIF1_R { FTFIF1_R :: new ( ( ( self . bits >> 5 ) & 0x01 ) != 0 ) } # [ doc = "Bit 6 - Half transfer finish flag of channel 1" ] # [ inline ( always ) ] pub fn htfif1 ( & self ) -> HTFIF1_R { HTFIF1_R :: new ( ( ( self . bits >> 6 ) & 0x01 ) != 0 ) } # [ doc = "Bit 7 - Transfer access error flag of channel 1" ] # [ inline ( always ) ] pub fn taeif1 ( & self ) -> TAEIF1_R { TAEIF1_R :: new ( ( ( self . bits >> 7 ) & 0x01 ) != 0 ) } # [ doc = "Bit 8 - Global interrupt flag of channel 2" ] # [ inline ( always ) ] pub fn gif2 ( & self ) -> GIF2_R { GIF2_R :: new ( ( ( self . bits >> 8 ) & 0x01 ) != 0 ) } # [ doc = "Bit 9 - Full transfer finish flag of channel 2" ] # [ inline ( always ) ] pub fn ftfif2 ( & self ) -> FTFIF2_R { FTFIF2_R :: new ( ( ( self . bits >> 9 ) & 0x01 ) != 0 ) } # [ doc = "Bit 10 - Half transfer finish flag of channel 2" ] # [ inline ( always ) ] pub fn htfif2 ( & self ) -> HTFIF2_R { HTFIF2_R :: new ( ( ( self . bits >> 10 ) & 0x01 ) != 0 ) } # [ doc = "Bit 11 - Transfer access error flag of channel 2" ] # [ inline ( always ) ] pub fn taeif2 ( & self ) -> TAEIF2_R { TAEIF2_R :: new ( ( ( self . bits >> 11 ) & 0x01 ) != 0 ) } # [ doc = "Bit 12 - Global interrupt flag of channel 3" ] # [ inline ( always ) ] pub fn gif3 ( & self ) -> GIF3_R { GIF3_R :: new ( ( ( self . bits >> 12 ) & 0x01 ) != 0 ) } # [ doc = "Bit 13 - Full transfer finish flag of channel 3" ] # [ inline ( always ) ] pub fn ftfif3 ( & self ) -> FTFIF3_R { FTFIF3_R :: new ( ( ( self . bits >> 13 ) & 0x01 ) != 0 ) } # [ doc = "Bit 14 - Half transfer finish flag of channel 3" ] # [ inline ( always ) ] pub fn htfif3 ( & self ) -> HTFIF3_R { HTFIF3_R :: new ( ( ( self . bits >> 14 ) & 0x01 ) != 0 ) } # [ doc = "Bit 15 - Transfer access error flag of channel 3" ] # [ inline ( always ) ] pub fn taeif3 ( & self ) -> TAEIF3_R { TAEIF3_R :: new ( ( ( self . bits >> 15 ) & 0x01 ) != 0 ) } # [ doc = "Bit 16 - Global interrupt flag of channel 4" ] # [ inline ( always ) ] pub fn gif4 ( & self ) -> GIF4_R { GIF4_R :: new ( ( ( self . bits >> 16 ) & 0x01 ) != 0 ) } # [ doc = "Bit 17 - Full transfer finish flag of channel 4" ] # [ inline ( always ) ] pub fn ftfif4 ( & self ) -> FTFIF4_R { FTFIF4_R :: new ( ( ( self . bits >> 17 ) & 0x01 ) != 0 ) } # [ doc = "Bit 18 - Half transfer finish flag of channel 4" ] # [ inline ( always ) ] pub fn htfif4 ( & self ) -> HTFIF4_R { HTFIF4_R :: new ( ( ( self . bits >> 18 ) & 0x01 ) != 0 ) } # [ doc = "Bit 19 - Transfer access error flag of channel 4" ] # [ inline ( always ) ] pub fn taeif4 ( & self ) -> TAEIF4_R { TAEIF4_R :: new ( ( ( self . bits >> 19 ) & 0x01 ) != 0 ) } # [ doc = "Bit 20 - Global interrupt flag of channel 5" ] # [ inline ( always ) ] pub fn gif5 ( & self ) -> GIF5_R { GIF5_R :: new ( ( ( self . bits >> 20 ) & 0x01 ) != 0 ) } # [ doc = "Bit 21 - Full transfer finish flag of channel 5" ] # [ inline ( always ) ] pub fn ftfif5 ( & self ) -> FTFIF5_R { FTFIF5_R :: new ( ( ( self . bits >> 21 ) & 0x01 ) != 0 ) } # [ doc = "Bit 22 - Half transfer finish flag of channel 5" ] # [ inline ( always ) ] pub fn htfif5 ( & self ) -> HTFIF5_R { HTFIF5_R :: new ( ( ( self . bits >> 22 ) & 0x01 ) != 0 ) } # [ doc = "Bit 23 - Transfer access error flag of channel 5" ] # [ inline ( always ) ] pub fn taeif5 ( & self ) -> TAEIF5_R { TAEIF5_R :: new ( ( ( self . bits >> 23 ) & 0x01 ) != 0 ) } # [ doc = "Bit 24 - Global interrupt flag of channel 6" ] # [ inline ( always ) ] pub fn gif6 ( & self ) -> GIF6_R { GIF6_R :: new ( ( ( self . bits >> 24 ) & 0x01 ) != 0 ) } # [ doc = "Bit 25 - Full transfer finish flag of channel 6" ] # [ inline ( always ) ] pub fn ftfif6 ( & self ) -> FTFIF6_R { FTFIF6_R :: new ( ( ( self . bits >> 25 ) & 0x01 ) != 0 ) } # [ doc = "Bit 26 - Half transfer finish flag of channel 6" ] # [ inline ( always ) ] pub fn htfif6 ( & self ) -> HTFIF6_R { HTFIF6_R :: new ( ( ( self . bits >> 26 ) & 0x01 ) != 0 ) } # [ doc = "Bit 27 - Transfer access error flag of channel 6" ] # [ inline ( always ) ] pub fn taeif6 ( & self ) -> TAEIF6_R { TAEIF6_R :: new ( ( ( self . bits >> 27 ) & 0x01 ) != 0 ) } }