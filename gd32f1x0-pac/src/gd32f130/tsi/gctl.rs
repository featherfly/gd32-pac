# [ doc = "Reader of register GCTL" ] pub type R = crate :: R < u32 , super :: GCTL > ; # [ doc = "Writer for register GCTL" ] pub type W = crate :: W < u32 , super :: GCTL > ; # [ doc = "Register GCTL `reset()`'s with value 0" ] impl crate :: ResetValue for super :: GCTL { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `GC5`" ] pub type GC5_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GC4`" ] pub type GC4_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GC3`" ] pub type GC3_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GC2`" ] pub type GC2_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GC1`" ] pub type GC1_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GC0`" ] pub type GC0_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `GE5`" ] pub type GE5_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `GE5`" ] pub struct GE5_W < 'a > { w : & 'a mut W , } impl < 'a > GE5_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 5 ) ) | ( ( ( value as u32 ) & 0x01 ) << 5 ) ; self . w } } # [ doc = "Reader of field `GE4`" ] pub type GE4_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `GE4`" ] pub struct GE4_W < 'a > { w : & 'a mut W , } impl < 'a > GE4_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 4 ) ) | ( ( ( value as u32 ) & 0x01 ) << 4 ) ; self . w } } # [ doc = "Reader of field `GE3`" ] pub type GE3_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `GE3`" ] pub struct GE3_W < 'a > { w : & 'a mut W , } impl < 'a > GE3_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 3 ) ) | ( ( ( value as u32 ) & 0x01 ) << 3 ) ; self . w } } # [ doc = "Reader of field `GE2`" ] pub type GE2_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `GE2`" ] pub struct GE2_W < 'a > { w : & 'a mut W , } impl < 'a > GE2_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 2 ) ) | ( ( ( value as u32 ) & 0x01 ) << 2 ) ; self . w } } # [ doc = "Reader of field `GE1`" ] pub type GE1_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `GE1`" ] pub struct GE1_W < 'a > { w : & 'a mut W , } impl < 'a > GE1_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 1 ) ) | ( ( ( value as u32 ) & 0x01 ) << 1 ) ; self . w } } # [ doc = "Reader of field `GE0`" ] pub type GE0_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `GE0`" ] pub struct GE0_W < 'a > { w : & 'a mut W , } impl < 'a > GE0_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x01 ) | ( ( value as u32 ) & 0x01 ) ; self . w } } impl R { # [ doc = "Bit 21 - Analog I/O group 5 status" ] # [ inline ( always ) ] pub fn gc5 ( & self ) -> GC5_R { GC5_R :: new ( ( ( self . bits >> 21 ) & 0x01 ) != 0 ) } # [ doc = "Bit 20 - Analog I/O group 4 status" ] # [ inline ( always ) ] pub fn gc4 ( & self ) -> GC4_R { GC4_R :: new ( ( ( self . bits >> 20 ) & 0x01 ) != 0 ) } # [ doc = "Bit 19 - Analog I/O group 3 status" ] # [ inline ( always ) ] pub fn gc3 ( & self ) -> GC3_R { GC3_R :: new ( ( ( self . bits >> 19 ) & 0x01 ) != 0 ) } # [ doc = "Bit 18 - Analog I/O group 2 status" ] # [ inline ( always ) ] pub fn gc2 ( & self ) -> GC2_R { GC2_R :: new ( ( ( self . bits >> 18 ) & 0x01 ) != 0 ) } # [ doc = "Bit 17 - Analog I/O group 1 status" ] # [ inline ( always ) ] pub fn gc1 ( & self ) -> GC1_R { GC1_R :: new ( ( ( self . bits >> 17 ) & 0x01 ) != 0 ) } # [ doc = "Bit 16 - Analog I/O group 0 status" ] # [ inline ( always ) ] pub fn gc0 ( & self ) -> GC0_R { GC0_R :: new ( ( ( self . bits >> 16 ) & 0x01 ) != 0 ) } # [ doc = "Bit 5 - Analog I/O group 5 enable" ] # [ inline ( always ) ] pub fn ge5 ( & self ) -> GE5_R { GE5_R :: new ( ( ( self . bits >> 5 ) & 0x01 ) != 0 ) } # [ doc = "Bit 4 - Analog I/O group 4 enable" ] # [ inline ( always ) ] pub fn ge4 ( & self ) -> GE4_R { GE4_R :: new ( ( ( self . bits >> 4 ) & 0x01 ) != 0 ) } # [ doc = "Bit 3 - Analog I/O group 3 enable" ] # [ inline ( always ) ] pub fn ge3 ( & self ) -> GE3_R { GE3_R :: new ( ( ( self . bits >> 3 ) & 0x01 ) != 0 ) } # [ doc = "Bit 2 - Analog I/O group 2 enable" ] # [ inline ( always ) ] pub fn ge2 ( & self ) -> GE2_R { GE2_R :: new ( ( ( self . bits >> 2 ) & 0x01 ) != 0 ) } # [ doc = "Bit 1 - Analog I/O group 1 enable" ] # [ inline ( always ) ] pub fn ge1 ( & self ) -> GE1_R { GE1_R :: new ( ( ( self . bits >> 1 ) & 0x01 ) != 0 ) } # [ doc = "Bit 0 - Analog I/O group 0 enable" ] # [ inline ( always ) ] pub fn ge0 ( & self ) -> GE0_R { GE0_R :: new ( ( self . bits & 0x01 ) != 0 ) } } impl W { # [ doc = "Bit 5 - Analog I/O group 5 enable" ] # [ inline ( always ) ] pub fn ge5 ( & mut self ) -> GE5_W { GE5_W { w : self } } # [ doc = "Bit 4 - Analog I/O group 4 enable" ] # [ inline ( always ) ] pub fn ge4 ( & mut self ) -> GE4_W { GE4_W { w : self } } # [ doc = "Bit 3 - Analog I/O group 3 enable" ] # [ inline ( always ) ] pub fn ge3 ( & mut self ) -> GE3_W { GE3_W { w : self } } # [ doc = "Bit 2 - Analog I/O group 2 enable" ] # [ inline ( always ) ] pub fn ge2 ( & mut self ) -> GE2_W { GE2_W { w : self } } # [ doc = "Bit 1 - Analog I/O group 1 enable" ] # [ inline ( always ) ] pub fn ge1 ( & mut self ) -> GE1_W { GE1_W { w : self } } # [ doc = "Bit 0 - Analog I/O group 0 enable" ] # [ inline ( always ) ] pub fn ge0 ( & mut self ) -> GE0_W { GE0_W { w : self } } }