# [ doc = "Reader of register AFSEL0" ] pub type R = crate :: R < u32 , super :: AFSEL0 > ; # [ doc = "Writer for register AFSEL0" ] pub type W = crate :: W < u32 , super :: AFSEL0 > ; # [ doc = "Register AFSEL0 `reset()`'s with value 0" ] impl crate :: ResetValue for super :: AFSEL0 { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `SEL7`" ] pub type SEL7_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `SEL7`" ] pub struct SEL7_W < 'a > { w : & 'a mut W , } impl < 'a > SEL7_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 28 ) ) | ( ( ( value as u32 ) & 0x0f ) << 28 ) ; self . w } } # [ doc = "Reader of field `SEL6`" ] pub type SEL6_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `SEL6`" ] pub struct SEL6_W < 'a > { w : & 'a mut W , } impl < 'a > SEL6_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 24 ) ) | ( ( ( value as u32 ) & 0x0f ) << 24 ) ; self . w } } # [ doc = "Reader of field `SEL5`" ] pub type SEL5_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `SEL5`" ] pub struct SEL5_W < 'a > { w : & 'a mut W , } impl < 'a > SEL5_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 20 ) ) | ( ( ( value as u32 ) & 0x0f ) << 20 ) ; self . w } } # [ doc = "Reader of field `SEL4`" ] pub type SEL4_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `SEL4`" ] pub struct SEL4_W < 'a > { w : & 'a mut W , } impl < 'a > SEL4_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 16 ) ) | ( ( ( value as u32 ) & 0x0f ) << 16 ) ; self . w } } # [ doc = "Reader of field `SEL3`" ] pub type SEL3_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `SEL3`" ] pub struct SEL3_W < 'a > { w : & 'a mut W , } impl < 'a > SEL3_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 12 ) ) | ( ( ( value as u32 ) & 0x0f ) << 12 ) ; self . w } } # [ doc = "Reader of field `SEL2`" ] pub type SEL2_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `SEL2`" ] pub struct SEL2_W < 'a > { w : & 'a mut W , } impl < 'a > SEL2_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 8 ) ) | ( ( ( value as u32 ) & 0x0f ) << 8 ) ; self . w } } # [ doc = "Reader of field `SEL1`" ] pub type SEL1_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `SEL1`" ] pub struct SEL1_W < 'a > { w : & 'a mut W , } impl < 'a > SEL1_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x0f << 4 ) ) | ( ( ( value as u32 ) & 0x0f ) << 4 ) ; self . w } } # [ doc = "Reader of field `SEL0`" ] pub type SEL0_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `SEL0`" ] pub struct SEL0_W < 'a > { w : & 'a mut W , } impl < 'a > SEL0_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x0f ) | ( ( value as u32 ) & 0x0f ) ; self . w } } impl R { # [ doc = "Bits 28:31 - Pin 7 alternate function selected" ] # [ inline ( always ) ] pub fn sel7 ( & self ) -> SEL7_R { SEL7_R :: new ( ( ( self . bits >> 28 ) & 0x0f ) as u8 ) } # [ doc = "Bits 24:27 - Pin 6 alternate function selected" ] # [ inline ( always ) ] pub fn sel6 ( & self ) -> SEL6_R { SEL6_R :: new ( ( ( self . bits >> 24 ) & 0x0f ) as u8 ) } # [ doc = "Bits 20:23 - Pin 5 alternate function selected" ] # [ inline ( always ) ] pub fn sel5 ( & self ) -> SEL5_R { SEL5_R :: new ( ( ( self . bits >> 20 ) & 0x0f ) as u8 ) } # [ doc = "Bits 16:19 - Pin 4 alternate function selected" ] # [ inline ( always ) ] pub fn sel4 ( & self ) -> SEL4_R { SEL4_R :: new ( ( ( self . bits >> 16 ) & 0x0f ) as u8 ) } # [ doc = "Bits 12:15 - Pin 3 alternate function selected" ] # [ inline ( always ) ] pub fn sel3 ( & self ) -> SEL3_R { SEL3_R :: new ( ( ( self . bits >> 12 ) & 0x0f ) as u8 ) } # [ doc = "Bits 8:11 - Pin 2 alternate function selected" ] # [ inline ( always ) ] pub fn sel2 ( & self ) -> SEL2_R { SEL2_R :: new ( ( ( self . bits >> 8 ) & 0x0f ) as u8 ) } # [ doc = "Bits 4:7 - Pin 1 alternate function selected" ] # [ inline ( always ) ] pub fn sel1 ( & self ) -> SEL1_R { SEL1_R :: new ( ( ( self . bits >> 4 ) & 0x0f ) as u8 ) } # [ doc = "Bits 0:3 - Pin 0 alternate function selected" ] # [ inline ( always ) ] pub fn sel0 ( & self ) -> SEL0_R { SEL0_R :: new ( ( self . bits & 0x0f ) as u8 ) } } impl W { # [ doc = "Bits 28:31 - Pin 7 alternate function selected" ] # [ inline ( always ) ] pub fn sel7 ( & mut self ) -> SEL7_W { SEL7_W { w : self } } # [ doc = "Bits 24:27 - Pin 6 alternate function selected" ] # [ inline ( always ) ] pub fn sel6 ( & mut self ) -> SEL6_W { SEL6_W { w : self } } # [ doc = "Bits 20:23 - Pin 5 alternate function selected" ] # [ inline ( always ) ] pub fn sel5 ( & mut self ) -> SEL5_W { SEL5_W { w : self } } # [ doc = "Bits 16:19 - Pin 4 alternate function selected" ] # [ inline ( always ) ] pub fn sel4 ( & mut self ) -> SEL4_W { SEL4_W { w : self } } # [ doc = "Bits 12:15 - Pin 3 alternate function selected" ] # [ inline ( always ) ] pub fn sel3 ( & mut self ) -> SEL3_W { SEL3_W { w : self } } # [ doc = "Bits 8:11 - Pin 2 alternate function selected" ] # [ inline ( always ) ] pub fn sel2 ( & mut self ) -> SEL2_W { SEL2_W { w : self } } # [ doc = "Bits 4:7 - Pin 1 alternate function selected" ] # [ inline ( always ) ] pub fn sel1 ( & mut self ) -> SEL1_W { SEL1_W { w : self } } # [ doc = "Bits 0:3 - Pin 0 alternate function selected" ] # [ inline ( always ) ] pub fn sel0 ( & mut self ) -> SEL0_W { SEL0_W { w : self } } }