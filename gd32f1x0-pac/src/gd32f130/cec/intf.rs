# [ doc = "Reader of register INTF" ] pub type R = crate :: R < u32 , super :: INTF > ; # [ doc = "Writer for register INTF" ] pub type W = crate :: W < u32 , super :: INTF > ; # [ doc = "Register INTF `reset()`'s with value 0" ] impl crate :: ResetValue for super :: INTF { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `TAERR`" ] pub type TAERR_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `TAERR`" ] pub struct TAERR_W < 'a > { w : & 'a mut W , } impl < 'a > TAERR_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 12 ) ) | ( ( ( value as u32 ) & 0x01 ) << 12 ) ; self . w } } # [ doc = "Reader of field `TERR`" ] pub type TERR_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `TERR`" ] pub struct TERR_W < 'a > { w : & 'a mut W , } impl < 'a > TERR_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 11 ) ) | ( ( ( value as u32 ) & 0x01 ) << 11 ) ; self . w } } # [ doc = "Reader of field `TU`" ] pub type TU_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `TU`" ] pub struct TU_W < 'a > { w : & 'a mut W , } impl < 'a > TU_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 10 ) ) | ( ( ( value as u32 ) & 0x01 ) << 10 ) ; self . w } } # [ doc = "Reader of field `TEND`" ] pub type TEND_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `TEND`" ] pub struct TEND_W < 'a > { w : & 'a mut W , } impl < 'a > TEND_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 9 ) ) | ( ( ( value as u32 ) & 0x01 ) << 9 ) ; self . w } } # [ doc = "Reader of field `TBR`" ] pub type TBR_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `TBR`" ] pub struct TBR_W < 'a > { w : & 'a mut W , } impl < 'a > TBR_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 8 ) ) | ( ( ( value as u32 ) & 0x01 ) << 8 ) ; self . w } } # [ doc = "Reader of field `LSTARB`" ] pub type LSTARB_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `LSTARB`" ] pub struct LSTARB_W < 'a > { w : & 'a mut W , } impl < 'a > LSTARB_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 7 ) ) | ( ( ( value as u32 ) & 0x01 ) << 7 ) ; self . w } } # [ doc = "Reader of field `RAE`" ] pub type RAE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `RAE`" ] pub struct RAE_W < 'a > { w : & 'a mut W , } impl < 'a > RAE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 6 ) ) | ( ( ( value as u32 ) & 0x01 ) << 6 ) ; self . w } } # [ doc = "Reader of field `RLBPE`" ] pub type RLBPE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `RLBPE`" ] pub struct RLBPE_W < 'a > { w : & 'a mut W , } impl < 'a > RLBPE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 5 ) ) | ( ( ( value as u32 ) & 0x01 ) << 5 ) ; self . w } } # [ doc = "Reader of field `RSBPE`" ] pub type RSBPE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `RSBPE`" ] pub struct RSBPE_W < 'a > { w : & 'a mut W , } impl < 'a > RSBPE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 4 ) ) | ( ( ( value as u32 ) & 0x01 ) << 4 ) ; self . w } } # [ doc = "Reader of field `RBRE`" ] pub type RBRE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `RBRE`" ] pub struct RBRE_W < 'a > { w : & 'a mut W , } impl < 'a > RBRE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 3 ) ) | ( ( ( value as u32 ) & 0x01 ) << 3 ) ; self . w } } # [ doc = "Reader of field `RO`" ] pub type RO_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `RO`" ] pub struct RO_W < 'a > { w : & 'a mut W , } impl < 'a > RO_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 2 ) ) | ( ( ( value as u32 ) & 0x01 ) << 2 ) ; self . w } } # [ doc = "Reader of field `REND`" ] pub type REND_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `REND`" ] pub struct REND_W < 'a > { w : & 'a mut W , } impl < 'a > REND_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 1 ) ) | ( ( ( value as u32 ) & 0x01 ) << 1 ) ; self . w } } # [ doc = "Reader of field `RBR`" ] pub type RBR_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `RBR`" ] pub struct RBR_W < 'a > { w : & 'a mut W , } impl < 'a > RBR_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x01 ) | ( ( value as u32 ) & 0x01 ) ; self . w } } impl R { # [ doc = "Bit 12 - Tx ACK Error flag" ] # [ inline ( always ) ] pub fn taerr ( & self ) -> TAERR_R { TAERR_R :: new ( ( ( self . bits >> 12 ) & 0x01 ) != 0 ) } # [ doc = "Bit 11 - Tx-Error" ] # [ inline ( always ) ] pub fn terr ( & self ) -> TERR_R { TERR_R :: new ( ( ( self . bits >> 11 ) & 0x01 ) != 0 ) } # [ doc = "Bit 10 - Tx data buffer underrun" ] # [ inline ( always ) ] pub fn tu ( & self ) -> TU_R { TU_R :: new ( ( ( self . bits >> 10 ) & 0x01 ) != 0 ) } # [ doc = "Bit 9 - Transmission successfully end" ] # [ inline ( always ) ] pub fn tend ( & self ) -> TEND_R { TEND_R :: new ( ( ( self . bits >> 9 ) & 0x01 ) != 0 ) } # [ doc = "Bit 8 - Tx-Byte data request" ] # [ inline ( always ) ] pub fn tbr ( & self ) -> TBR_R { TBR_R :: new ( ( ( self . bits >> 8 ) & 0x01 ) != 0 ) } # [ doc = "Bit 7 - Arbitration lost" ] # [ inline ( always ) ] pub fn lstarb ( & self ) -> LSTARB_R { LSTARB_R :: new ( ( ( self . bits >> 7 ) & 0x01 ) != 0 ) } # [ doc = "Bit 6 - Rx ACK Error" ] # [ inline ( always ) ] pub fn rae ( & self ) -> RAE_R { RAE_R :: new ( ( ( self . bits >> 6 ) & 0x01 ) != 0 ) } # [ doc = "Bit 5 - Long Bit Period Error" ] # [ inline ( always ) ] pub fn rlbpe ( & self ) -> RLBPE_R { RLBPE_R :: new ( ( ( self . bits >> 5 ) & 0x01 ) != 0 ) } # [ doc = "Bit 4 - Short Bit Period Error" ] # [ inline ( always ) ] pub fn rsbpe ( & self ) -> RSBPE_R { RSBPE_R :: new ( ( ( self . bits >> 4 ) & 0x01 ) != 0 ) } # [ doc = "Bit 3 - Bit Rising Error" ] # [ inline ( always ) ] pub fn rbre ( & self ) -> RBRE_R { RBRE_R :: new ( ( ( self . bits >> 3 ) & 0x01 ) != 0 ) } # [ doc = "Bit 2 - RX Overrun" ] # [ inline ( always ) ] pub fn ro ( & self ) -> RO_R { RO_R :: new ( ( ( self . bits >> 2 ) & 0x01 ) != 0 ) } # [ doc = "Bit 1 - End of Reception" ] # [ inline ( always ) ] pub fn rend ( & self ) -> REND_R { REND_R :: new ( ( ( self . bits >> 1 ) & 0x01 ) != 0 ) } # [ doc = "Bit 0 - Rx-Byte data received" ] # [ inline ( always ) ] pub fn rbr ( & self ) -> RBR_R { RBR_R :: new ( ( self . bits & 0x01 ) != 0 ) } } impl W { # [ doc = "Bit 12 - Tx ACK Error flag" ] # [ inline ( always ) ] pub fn taerr ( & mut self ) -> TAERR_W { TAERR_W { w : self } } # [ doc = "Bit 11 - Tx-Error" ] # [ inline ( always ) ] pub fn terr ( & mut self ) -> TERR_W { TERR_W { w : self } } # [ doc = "Bit 10 - Tx data buffer underrun" ] # [ inline ( always ) ] pub fn tu ( & mut self ) -> TU_W { TU_W { w : self } } # [ doc = "Bit 9 - Transmission successfully end" ] # [ inline ( always ) ] pub fn tend ( & mut self ) -> TEND_W { TEND_W { w : self } } # [ doc = "Bit 8 - Tx-Byte data request" ] # [ inline ( always ) ] pub fn tbr ( & mut self ) -> TBR_W { TBR_W { w : self } } # [ doc = "Bit 7 - Arbitration lost" ] # [ inline ( always ) ] pub fn lstarb ( & mut self ) -> LSTARB_W { LSTARB_W { w : self } } # [ doc = "Bit 6 - Rx ACK Error" ] # [ inline ( always ) ] pub fn rae ( & mut self ) -> RAE_W { RAE_W { w : self } } # [ doc = "Bit 5 - Long Bit Period Error" ] # [ inline ( always ) ] pub fn rlbpe ( & mut self ) -> RLBPE_W { RLBPE_W { w : self } } # [ doc = "Bit 4 - Short Bit Period Error" ] # [ inline ( always ) ] pub fn rsbpe ( & mut self ) -> RSBPE_W { RSBPE_W { w : self } } # [ doc = "Bit 3 - Bit Rising Error" ] # [ inline ( always ) ] pub fn rbre ( & mut self ) -> RBRE_W { RBRE_W { w : self } } # [ doc = "Bit 2 - RX Overrun" ] # [ inline ( always ) ] pub fn ro ( & mut self ) -> RO_W { RO_W { w : self } } # [ doc = "Bit 1 - End of Reception" ] # [ inline ( always ) ] pub fn rend ( & mut self ) -> REND_W { REND_W { w : self } } # [ doc = "Bit 0 - Rx-Byte data received" ] # [ inline ( always ) ] pub fn rbr ( & mut self ) -> RBR_W { RBR_W { w : self } } }